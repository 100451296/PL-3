Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statementList
Rule 2     statementList -> statement
Rule 3     statementList -> statementList statement
Rule 4     statement -> instruction
Rule 5     statement -> COMMENT
Rule 6     statement -> conditional
Rule 7     statement -> loop
Rule 8     statement -> function_definition
Rule 9     conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
Rule 10    conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
Rule 11    loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
Rule 12    function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
Rule 13    args_list -> STRING COLON type
Rule 14    args_list -> STRING COLON type COMMA args_list
Rule 15    instruction -> declaration SEMICOLON
Rule 16    instruction -> asignation SEMICOLON
Rule 17    instruction -> property_asignation SEMICOLON
Rule 18    property_asignation -> STRING properties ASSIGN value
Rule 19    declaration -> LET declaration_identifier
Rule 20    declaration -> LET asignation
Rule 21    declaration -> TYPE STRING ASSIGN type_object
Rule 22    declaration_identifier -> STRING
Rule 23    declaration_identifier -> STRING COMMA declaration_identifier
Rule 24    declaration_identifier -> STRING COLON STRING
Rule 25    declaration_identifier -> STRING COLON STRING COMMA declaration_identifier
Rule 26    identifiers -> STRING
Rule 27    identifiers -> STRING COMMA identifiers
Rule 28    asignation -> identifiers ASSIGN value
Rule 29    asignation -> object_identifiers ASSIGN object
Rule 30    object_identifiers -> STRING COLON STRING
Rule 31    object_identifiers -> STRING COLON STRING COMMA object_identifiers
Rule 32    object -> OPEN_BRACE pairs CLOSE_BRACE
Rule 33    object -> OPEN_BRACE CLOSE_BRACE
Rule 34    pairs -> pair COMMA pairs
Rule 35    pairs -> pair
Rule 36    pairs -> pair COMMA
Rule 37    pair -> key COLON value
Rule 38    type_object -> OPEN_BRACE type_pairs CLOSE_BRACE
Rule 39    type_object -> OPEN_BRACE CLOSE_BRACE
Rule 40    type_pairs -> type_pair COMMA type_pairs
Rule 41    type_pairs -> type_pair
Rule 42    type_pairs -> type_pair COMMA
Rule 43    type_pair -> key COLON type
Rule 44    key -> QUOTED_STRING
Rule 45    key -> STRING
Rule 46    type -> CHARACTER
Rule 47    type -> INT_TYPE
Rule 48    type -> FLOAT_TYPE
Rule 49    type -> BOOLEAN
Rule 50    properties -> dot_property
Rule 51    properties -> square_property
Rule 52    properties -> dot_property properties
Rule 53    properties -> square_property properties
Rule 54    dot_property -> DOT STRING
Rule 55    square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE
Rule 56    value -> CHARACTER_VALUE
Rule 57    value -> INTEGER
Rule 58    value -> FLOAT
Rule 59    value -> HEX
Rule 60    value -> SCIENTIFIC
Rule 61    value -> OCTAL
Rule 62    value -> BINARY
Rule 63    value -> NULL
Rule 64    value -> TRUE
Rule 65    value -> FALSE
Rule 66    value -> expression_arith
Rule 67    value -> expression_comp
Rule 68    value -> NOT OPEN_PAREN expression_comp CLOSE_PAREN
Rule 69    value -> expression_logic
Rule 70    value -> NOT logic_element
Rule 71    value -> object
Rule 72    value -> STRING properties
Rule 73    value -> STRING
Rule 74    expression -> expression_logic
Rule 75    expression -> logic_element
Rule 76    expression_logic -> logic_element logic_operator logic_element
Rule 77    expression_logic -> logic_element logic_operator logic_element logic_operations
Rule 78    logic_operator -> AND
Rule 79    logic_operator -> OR
Rule 80    logic_operations -> logic_operation
Rule 81    logic_operations -> logic_operation logic_operations
Rule 82    logic_operation -> logic_operator logic_element
Rule 83    expression_comp -> comp_element comp_operator comp_element
Rule 84    comp_operator -> EQUAL
Rule 85    comp_operator -> GRATER
Rule 86    comp_operator -> GRATER_EQUAL
Rule 87    comp_operator -> LOWER
Rule 88    comp_operator -> LOWER_EQUAL
Rule 89    expression_arith -> element operations
Rule 90    operations -> operation
Rule 91    operations -> operation operations
Rule 92    operation -> arithmetic_operator element
Rule 93    arithmetic_operator -> PLUS
Rule 94    arithmetic_operator -> MINUS
Rule 95    arithmetic_operator -> MULTIPLY
Rule 96    arithmetic_operator -> DIVISION
Rule 97    element -> INTEGER
Rule 98    element -> FLOAT
Rule 99    element -> HEX
Rule 100   element -> SCIENTIFIC
Rule 101   element -> OCTAL
Rule 102   element -> BINARY
Rule 103   element -> STRING
Rule 104   element -> OPEN_PAREN expression_arith CLOSE_PAREN
Rule 105   element -> STRING properties
Rule 106   element -> CHARACTER_VALUE
Rule 107   comp_element -> INTEGER
Rule 108   comp_element -> FLOAT
Rule 109   comp_element -> HEX
Rule 110   comp_element -> SCIENTIFIC
Rule 111   comp_element -> OCTAL
Rule 112   comp_element -> BINARY
Rule 113   comp_element -> STRING
Rule 114   comp_element -> expression_arith
Rule 115   comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN
Rule 116   comp_element -> STRING properties
Rule 117   comp_element -> CHARACTER_VALUE
Rule 118   logic_element -> TRUE
Rule 119   logic_element -> FALSE
Rule 120   logic_element -> expression_comp
Rule 121   logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN
Rule 122   logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN
Rule 123   logic_element -> STRING
Rule 124   logic_element -> NOT logic_element

Terminals, with rules where they appear

AND                  : 78
ASSIGN               : 18 21 28 29
BINARY               : 62 102 112
BOOLEAN              : 49
CHARACTER            : 46
CHARACTER_VALUE      : 56 106 117
CLOSE_BRACE          : 9 10 10 11 12 32 33 38 39
CLOSE_PAREN          : 9 10 11 12 68 104 115 121 122
CLOSE_SQUARE         : 55
COLON                : 12 13 14 24 25 30 31 37 43
COMMA                : 14 23 25 27 31 34 36 40 42
COMMENT              : 5
DIVISION             : 96
DOT                  : 54
ELSE                 : 10
EQUAL                : 84
FALSE                : 65 119
FLOAT                : 58 98 108
FLOAT_TYPE           : 48
FUNCTION             : 12
GRATER               : 85
GRATER_EQUAL         : 86
HEX                  : 59 99 109
IF                   : 9 10
INTEGER              : 57 97 107
INT_TYPE             : 47
LET                  : 19 20
LOWER                : 87
LOWER_EQUAL          : 88
MINUS                : 94
MULTIPLY             : 95
NOT                  : 68 70 121 124
NULL                 : 63
OCTAL                : 61 101 111
OPEN_BRACE           : 9 10 10 11 12 32 33 38 39
OPEN_PAREN           : 9 10 11 12 68 104 115 121 122
OPEN_SQUARE          : 55
OR                   : 79
PLUS                 : 93
QUOTED_STRING        : 44 55
RETURN               : 12
SCIENTIFIC           : 60 100 110
SEMICOLON            : 12 15 16 17
STRING               : 12 13 14 18 21 22 23 24 24 25 25 26 27 30 30 31 31 45 54 72 73 103 105 113 116 123
TRUE                 : 64 118
TYPE                 : 21
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

args_list            : 12 14
arithmetic_operator  : 92
asignation           : 16 20
comp_element         : 83 83
comp_operator        : 83
conditional          : 6
declaration          : 15
declaration_identifier : 19 23 25
dot_property         : 50 52
element              : 89 92
expression           : 9 10 11
expression_arith     : 66 104 114 115
expression_comp      : 67 68 120 121
expression_logic     : 69 74 122
function_definition  : 8
identifiers          : 27 28
instruction          : 4
key                  : 37 43
logic_element        : 70 75 76 76 77 77 82 124
logic_operation      : 80 81
logic_operations     : 77 81
logic_operator       : 76 77 82
loop                 : 7
object               : 29 71
object_identifiers   : 29 31
operation            : 90 91
operations           : 89 91
pair                 : 34 35 36
pairs                : 32 34
program              : 0
properties           : 18 52 53 72 105 116
property_asignation  : 17
square_property      : 51 53
statement            : 2 3
statementList        : 1 3 9 10 10 11 12
type                 : 12 13 14 43
type_object          : 21
type_pair            : 40 41 42
type_pairs           : 38 40
value                : 12 18 28 37

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statementList
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    program                        shift and go to state 1
    statementList                  shift and go to state 2
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statementList .
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    $end            reduce using rule 1 (program -> statementList .)
    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 3

    (2) statementList -> statement .

    COMMENT         reduce using rule 2 (statementList -> statement .)
    IF              reduce using rule 2 (statementList -> statement .)
    WHILE           reduce using rule 2 (statementList -> statement .)
    FUNCTION        reduce using rule 2 (statementList -> statement .)
    LET             reduce using rule 2 (statementList -> statement .)
    TYPE            reduce using rule 2 (statementList -> statement .)
    STRING          reduce using rule 2 (statementList -> statement .)
    $end            reduce using rule 2 (statementList -> statement .)
    CLOSE_BRACE     reduce using rule 2 (statementList -> statement .)
    RETURN          reduce using rule 2 (statementList -> statement .)


state 4

    (4) statement -> instruction .

    COMMENT         reduce using rule 4 (statement -> instruction .)
    IF              reduce using rule 4 (statement -> instruction .)
    WHILE           reduce using rule 4 (statement -> instruction .)
    FUNCTION        reduce using rule 4 (statement -> instruction .)
    LET             reduce using rule 4 (statement -> instruction .)
    TYPE            reduce using rule 4 (statement -> instruction .)
    STRING          reduce using rule 4 (statement -> instruction .)
    $end            reduce using rule 4 (statement -> instruction .)
    CLOSE_BRACE     reduce using rule 4 (statement -> instruction .)
    RETURN          reduce using rule 4 (statement -> instruction .)


state 5

    (5) statement -> COMMENT .

    COMMENT         reduce using rule 5 (statement -> COMMENT .)
    IF              reduce using rule 5 (statement -> COMMENT .)
    WHILE           reduce using rule 5 (statement -> COMMENT .)
    FUNCTION        reduce using rule 5 (statement -> COMMENT .)
    LET             reduce using rule 5 (statement -> COMMENT .)
    TYPE            reduce using rule 5 (statement -> COMMENT .)
    STRING          reduce using rule 5 (statement -> COMMENT .)
    $end            reduce using rule 5 (statement -> COMMENT .)
    CLOSE_BRACE     reduce using rule 5 (statement -> COMMENT .)
    RETURN          reduce using rule 5 (statement -> COMMENT .)


state 6

    (6) statement -> conditional .

    COMMENT         reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    WHILE           reduce using rule 6 (statement -> conditional .)
    FUNCTION        reduce using rule 6 (statement -> conditional .)
    LET             reduce using rule 6 (statement -> conditional .)
    TYPE            reduce using rule 6 (statement -> conditional .)
    STRING          reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    CLOSE_BRACE     reduce using rule 6 (statement -> conditional .)
    RETURN          reduce using rule 6 (statement -> conditional .)


state 7

    (7) statement -> loop .

    COMMENT         reduce using rule 7 (statement -> loop .)
    IF              reduce using rule 7 (statement -> loop .)
    WHILE           reduce using rule 7 (statement -> loop .)
    FUNCTION        reduce using rule 7 (statement -> loop .)
    LET             reduce using rule 7 (statement -> loop .)
    TYPE            reduce using rule 7 (statement -> loop .)
    STRING          reduce using rule 7 (statement -> loop .)
    $end            reduce using rule 7 (statement -> loop .)
    CLOSE_BRACE     reduce using rule 7 (statement -> loop .)
    RETURN          reduce using rule 7 (statement -> loop .)


state 8

    (8) statement -> function_definition .

    COMMENT         reduce using rule 8 (statement -> function_definition .)
    IF              reduce using rule 8 (statement -> function_definition .)
    WHILE           reduce using rule 8 (statement -> function_definition .)
    FUNCTION        reduce using rule 8 (statement -> function_definition .)
    LET             reduce using rule 8 (statement -> function_definition .)
    TYPE            reduce using rule 8 (statement -> function_definition .)
    STRING          reduce using rule 8 (statement -> function_definition .)
    $end            reduce using rule 8 (statement -> function_definition .)
    CLOSE_BRACE     reduce using rule 8 (statement -> function_definition .)
    RETURN          reduce using rule 8 (statement -> function_definition .)


state 9

    (15) instruction -> declaration . SEMICOLON

    SEMICOLON       shift and go to state 21


state 10

    (16) instruction -> asignation . SEMICOLON

    SEMICOLON       shift and go to state 22


state 11

    (17) instruction -> property_asignation . SEMICOLON

    SEMICOLON       shift and go to state 23


state 12

    (9) conditional -> IF . OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> IF . OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE

    OPEN_PAREN      shift and go to state 24


state 13

    (11) loop -> WHILE . OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE

    OPEN_PAREN      shift and go to state 25


state 14

    (12) function_definition -> FUNCTION . STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    STRING          shift and go to state 26


state 15

    (18) property_asignation -> STRING . properties ASSIGN value
    (26) identifiers -> STRING .
    (27) identifiers -> STRING . COMMA identifiers
    (30) object_identifiers -> STRING . COLON STRING
    (31) object_identifiers -> STRING . COLON STRING COMMA object_identifiers
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    ASSIGN          reduce using rule 26 (identifiers -> STRING .)
    COMMA           shift and go to state 28
    COLON           shift and go to state 29
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 27
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 16

    (19) declaration -> LET . declaration_identifier
    (20) declaration -> LET . asignation
    (22) declaration_identifier -> . STRING
    (23) declaration_identifier -> . STRING COMMA declaration_identifier
    (24) declaration_identifier -> . STRING COLON STRING
    (25) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    STRING          shift and go to state 36

    declaration_identifier         shift and go to state 34
    asignation                     shift and go to state 35
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 17

    (21) declaration -> TYPE . STRING ASSIGN type_object

    STRING          shift and go to state 37


state 18

    (28) asignation -> identifiers . ASSIGN value

    ASSIGN          shift and go to state 38


state 19

    (29) asignation -> object_identifiers . ASSIGN object

    ASSIGN          shift and go to state 39


state 20

    (3) statementList -> statementList statement .

    COMMENT         reduce using rule 3 (statementList -> statementList statement .)
    IF              reduce using rule 3 (statementList -> statementList statement .)
    WHILE           reduce using rule 3 (statementList -> statementList statement .)
    FUNCTION        reduce using rule 3 (statementList -> statementList statement .)
    LET             reduce using rule 3 (statementList -> statementList statement .)
    TYPE            reduce using rule 3 (statementList -> statementList statement .)
    STRING          reduce using rule 3 (statementList -> statementList statement .)
    $end            reduce using rule 3 (statementList -> statementList statement .)
    CLOSE_BRACE     reduce using rule 3 (statementList -> statementList statement .)
    RETURN          reduce using rule 3 (statementList -> statementList statement .)


state 21

    (15) instruction -> declaration SEMICOLON .

    COMMENT         reduce using rule 15 (instruction -> declaration SEMICOLON .)
    IF              reduce using rule 15 (instruction -> declaration SEMICOLON .)
    WHILE           reduce using rule 15 (instruction -> declaration SEMICOLON .)
    FUNCTION        reduce using rule 15 (instruction -> declaration SEMICOLON .)
    LET             reduce using rule 15 (instruction -> declaration SEMICOLON .)
    TYPE            reduce using rule 15 (instruction -> declaration SEMICOLON .)
    STRING          reduce using rule 15 (instruction -> declaration SEMICOLON .)
    $end            reduce using rule 15 (instruction -> declaration SEMICOLON .)
    CLOSE_BRACE     reduce using rule 15 (instruction -> declaration SEMICOLON .)
    RETURN          reduce using rule 15 (instruction -> declaration SEMICOLON .)


state 22

    (16) instruction -> asignation SEMICOLON .

    COMMENT         reduce using rule 16 (instruction -> asignation SEMICOLON .)
    IF              reduce using rule 16 (instruction -> asignation SEMICOLON .)
    WHILE           reduce using rule 16 (instruction -> asignation SEMICOLON .)
    FUNCTION        reduce using rule 16 (instruction -> asignation SEMICOLON .)
    LET             reduce using rule 16 (instruction -> asignation SEMICOLON .)
    TYPE            reduce using rule 16 (instruction -> asignation SEMICOLON .)
    STRING          reduce using rule 16 (instruction -> asignation SEMICOLON .)
    $end            reduce using rule 16 (instruction -> asignation SEMICOLON .)
    CLOSE_BRACE     reduce using rule 16 (instruction -> asignation SEMICOLON .)
    RETURN          reduce using rule 16 (instruction -> asignation SEMICOLON .)


state 23

    (17) instruction -> property_asignation SEMICOLON .

    COMMENT         reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    IF              reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    WHILE           reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    FUNCTION        reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    LET             reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    TYPE            reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    STRING          reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    $end            reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    CLOSE_BRACE     reduce using rule 17 (instruction -> property_asignation SEMICOLON .)
    RETURN          reduce using rule 17 (instruction -> property_asignation SEMICOLON .)


state 24

    (9) conditional -> IF OPEN_PAREN . expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> IF OPEN_PAREN . expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (74) expression -> . expression_logic
    (75) expression -> . logic_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    OPEN_PAREN      shift and go to state 40
    STRING          shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    CHARACTER_VALUE shift and go to state 57

    expression                     shift and go to state 41
    expression_logic               shift and go to state 42
    logic_element                  shift and go to state 43
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49
    expression_arith               shift and go to state 56
    element                        shift and go to state 58

state 25

    (11) loop -> WHILE OPEN_PAREN . expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (74) expression -> . expression_logic
    (75) expression -> . logic_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    OPEN_PAREN      shift and go to state 40
    STRING          shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    CHARACTER_VALUE shift and go to state 57

    expression                     shift and go to state 59
    expression_logic               shift and go to state 42
    logic_element                  shift and go to state 43
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49
    expression_arith               shift and go to state 56
    element                        shift and go to state 58

state 26

    (12) function_definition -> FUNCTION STRING . OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    OPEN_PAREN      shift and go to state 60


state 27

    (18) property_asignation -> STRING properties . ASSIGN value

    ASSIGN          shift and go to state 61


state 28

    (27) identifiers -> STRING COMMA . identifiers
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers

    STRING          shift and go to state 62

    identifiers                    shift and go to state 63

state 29

    (30) object_identifiers -> STRING COLON . STRING
    (31) object_identifiers -> STRING COLON . STRING COMMA object_identifiers

    STRING          shift and go to state 64


state 30

    (50) properties -> dot_property .
    (52) properties -> dot_property . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    ASSIGN          reduce using rule 50 (properties -> dot_property .)
    EQUAL           reduce using rule 50 (properties -> dot_property .)
    GRATER          reduce using rule 50 (properties -> dot_property .)
    GRATER_EQUAL    reduce using rule 50 (properties -> dot_property .)
    LOWER           reduce using rule 50 (properties -> dot_property .)
    LOWER_EQUAL     reduce using rule 50 (properties -> dot_property .)
    PLUS            reduce using rule 50 (properties -> dot_property .)
    MINUS           reduce using rule 50 (properties -> dot_property .)
    MULTIPLY        reduce using rule 50 (properties -> dot_property .)
    DIVISION        reduce using rule 50 (properties -> dot_property .)
    SEMICOLON       reduce using rule 50 (properties -> dot_property .)
    COMMA           reduce using rule 50 (properties -> dot_property .)
    CLOSE_BRACE     reduce using rule 50 (properties -> dot_property .)
    AND             reduce using rule 50 (properties -> dot_property .)
    OR              reduce using rule 50 (properties -> dot_property .)
    CLOSE_PAREN     reduce using rule 50 (properties -> dot_property .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    dot_property                   shift and go to state 30
    properties                     shift and go to state 65
    square_property                shift and go to state 31

state 31

    (51) properties -> square_property .
    (53) properties -> square_property . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    ASSIGN          reduce using rule 51 (properties -> square_property .)
    EQUAL           reduce using rule 51 (properties -> square_property .)
    GRATER          reduce using rule 51 (properties -> square_property .)
    GRATER_EQUAL    reduce using rule 51 (properties -> square_property .)
    LOWER           reduce using rule 51 (properties -> square_property .)
    LOWER_EQUAL     reduce using rule 51 (properties -> square_property .)
    PLUS            reduce using rule 51 (properties -> square_property .)
    MINUS           reduce using rule 51 (properties -> square_property .)
    MULTIPLY        reduce using rule 51 (properties -> square_property .)
    DIVISION        reduce using rule 51 (properties -> square_property .)
    SEMICOLON       reduce using rule 51 (properties -> square_property .)
    COMMA           reduce using rule 51 (properties -> square_property .)
    CLOSE_BRACE     reduce using rule 51 (properties -> square_property .)
    AND             reduce using rule 51 (properties -> square_property .)
    OR              reduce using rule 51 (properties -> square_property .)
    CLOSE_PAREN     reduce using rule 51 (properties -> square_property .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    square_property                shift and go to state 31
    properties                     shift and go to state 66
    dot_property                   shift and go to state 30

state 32

    (54) dot_property -> DOT . STRING

    STRING          shift and go to state 67


state 33

    (55) square_property -> OPEN_SQUARE . QUOTED_STRING CLOSE_SQUARE

    QUOTED_STRING   shift and go to state 68


state 34

    (19) declaration -> LET declaration_identifier .

    SEMICOLON       reduce using rule 19 (declaration -> LET declaration_identifier .)


state 35

    (20) declaration -> LET asignation .

    SEMICOLON       reduce using rule 20 (declaration -> LET asignation .)


state 36

    (22) declaration_identifier -> STRING .
    (23) declaration_identifier -> STRING . COMMA declaration_identifier
    (24) declaration_identifier -> STRING . COLON STRING
    (25) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier
    (26) identifiers -> STRING .
    (27) identifiers -> STRING . COMMA identifiers
    (30) object_identifiers -> STRING . COLON STRING
    (31) object_identifiers -> STRING . COLON STRING COMMA object_identifiers

    SEMICOLON       reduce using rule 22 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 69
    COLON           shift and go to state 70
    ASSIGN          reduce using rule 26 (identifiers -> STRING .)


state 37

    (21) declaration -> TYPE STRING . ASSIGN type_object

    ASSIGN          shift and go to state 71


state 38

    (28) asignation -> identifiers ASSIGN . value
    (56) value -> . CHARACTER_VALUE
    (57) value -> . INTEGER
    (58) value -> . FLOAT
    (59) value -> . HEX
    (60) value -> . SCIENTIFIC
    (61) value -> . OCTAL
    (62) value -> . BINARY
    (63) value -> . NULL
    (64) value -> . TRUE
    (65) value -> . FALSE
    (66) value -> . expression_arith
    (67) value -> . expression_comp
    (68) value -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (69) value -> . expression_logic
    (70) value -> . NOT logic_element
    (71) value -> . object
    (72) value -> . STRING properties
    (73) value -> . STRING
    (89) expression_arith -> . element operations
    (83) expression_comp -> . comp_element comp_operator comp_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (32) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (33) object -> . OPEN_BRACE CLOSE_BRACE
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element

    CHARACTER_VALUE shift and go to state 73
    INTEGER         shift and go to state 74
    FLOAT           shift and go to state 75
    HEX             shift and go to state 76
    SCIENTIFIC      shift and go to state 77
    OCTAL           shift and go to state 78
    BINARY          shift and go to state 79
    NULL            shift and go to state 80
    TRUE            shift and go to state 81
    FALSE           shift and go to state 82
    NOT             shift and go to state 85
    STRING          shift and go to state 90
    OPEN_BRACE      shift and go to state 91
    OPEN_PAREN      shift and go to state 86

    value                          shift and go to state 72
    expression_arith               shift and go to state 83
    expression_comp                shift and go to state 84
    expression_logic               shift and go to state 87
    logic_element                  shift and go to state 88
    object                         shift and go to state 89
    element                        shift and go to state 58
    comp_element                   shift and go to state 49

state 39

    (29) asignation -> object_identifiers ASSIGN . object
    (32) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (33) object -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 91

    object                         shift and go to state 92

state 40

    (122) logic_element -> OPEN_PAREN . expression_logic CLOSE_PAREN
    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (89) expression_arith -> . element operations
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE

    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    OPEN_PAREN      shift and go to state 93
    STRING          shift and go to state 96
    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    HEX             shift and go to state 99
    SCIENTIFIC      shift and go to state 100
    OCTAL           shift and go to state 101
    BINARY          shift and go to state 102
    CHARACTER_VALUE shift and go to state 103

    expression_logic               shift and go to state 94
    expression_arith               shift and go to state 95
    logic_element                  shift and go to state 88
    element                        shift and go to state 58
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49

state 41

    (9) conditional -> IF OPEN_PAREN expression . CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> IF OPEN_PAREN expression . CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 104


state 42

    (74) expression -> expression_logic .

    CLOSE_PAREN     reduce using rule 74 (expression -> expression_logic .)


state 43

    (75) expression -> logic_element .
    (76) expression_logic -> logic_element . logic_operator logic_element
    (77) expression_logic -> logic_element . logic_operator logic_element logic_operations
    (78) logic_operator -> . AND
    (79) logic_operator -> . OR

    CLOSE_PAREN     reduce using rule 75 (expression -> logic_element .)
    AND             shift and go to state 106
    OR              shift and go to state 107

    logic_operator                 shift and go to state 105

state 44

    (118) logic_element -> TRUE .

    AND             reduce using rule 118 (logic_element -> TRUE .)
    OR              reduce using rule 118 (logic_element -> TRUE .)
    CLOSE_PAREN     reduce using rule 118 (logic_element -> TRUE .)
    SEMICOLON       reduce using rule 118 (logic_element -> TRUE .)
    COMMA           reduce using rule 118 (logic_element -> TRUE .)
    CLOSE_BRACE     reduce using rule 118 (logic_element -> TRUE .)


state 45

    (119) logic_element -> FALSE .

    AND             reduce using rule 119 (logic_element -> FALSE .)
    OR              reduce using rule 119 (logic_element -> FALSE .)
    CLOSE_PAREN     reduce using rule 119 (logic_element -> FALSE .)
    SEMICOLON       reduce using rule 119 (logic_element -> FALSE .)
    COMMA           reduce using rule 119 (logic_element -> FALSE .)
    CLOSE_BRACE     reduce using rule 119 (logic_element -> FALSE .)


state 46

    (120) logic_element -> expression_comp .

    AND             reduce using rule 120 (logic_element -> expression_comp .)
    OR              reduce using rule 120 (logic_element -> expression_comp .)
    CLOSE_PAREN     reduce using rule 120 (logic_element -> expression_comp .)
    SEMICOLON       reduce using rule 120 (logic_element -> expression_comp .)
    COMMA           reduce using rule 120 (logic_element -> expression_comp .)
    CLOSE_BRACE     reduce using rule 120 (logic_element -> expression_comp .)


state 47

    (121) logic_element -> NOT . OPEN_PAREN expression_comp CLOSE_PAREN
    (124) logic_element -> NOT . logic_element
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    OPEN_PAREN      shift and go to state 108
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    STRING          shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    CHARACTER_VALUE shift and go to state 57

    expression_comp                shift and go to state 46
    logic_element                  shift and go to state 109
    comp_element                   shift and go to state 49
    expression_arith               shift and go to state 56
    element                        shift and go to state 58

state 48

    (123) logic_element -> STRING .
    (113) comp_element -> STRING .
    (116) comp_element -> STRING . properties
    (103) element -> STRING .
    (105) element -> STRING . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    AND             reduce using rule 123 (logic_element -> STRING .)
    OR              reduce using rule 123 (logic_element -> STRING .)
    CLOSE_PAREN     reduce using rule 123 (logic_element -> STRING .)
    SEMICOLON       reduce using rule 123 (logic_element -> STRING .)
    COMMA           reduce using rule 123 (logic_element -> STRING .)
    CLOSE_BRACE     reduce using rule 123 (logic_element -> STRING .)
    EQUAL           reduce using rule 113 (comp_element -> STRING .)
    GRATER          reduce using rule 113 (comp_element -> STRING .)
    GRATER_EQUAL    reduce using rule 113 (comp_element -> STRING .)
    LOWER           reduce using rule 113 (comp_element -> STRING .)
    LOWER_EQUAL     reduce using rule 113 (comp_element -> STRING .)
    PLUS            reduce using rule 103 (element -> STRING .)
    MINUS           reduce using rule 103 (element -> STRING .)
    MULTIPLY        reduce using rule 103 (element -> STRING .)
    DIVISION        reduce using rule 103 (element -> STRING .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 110
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 49

    (83) expression_comp -> comp_element . comp_operator comp_element
    (84) comp_operator -> . EQUAL
    (85) comp_operator -> . GRATER
    (86) comp_operator -> . GRATER_EQUAL
    (87) comp_operator -> . LOWER
    (88) comp_operator -> . LOWER_EQUAL

    EQUAL           shift and go to state 112
    GRATER          shift and go to state 113
    GRATER_EQUAL    shift and go to state 114
    LOWER           shift and go to state 115
    LOWER_EQUAL     shift and go to state 116

    comp_operator                  shift and go to state 111

state 50

    (107) comp_element -> INTEGER .
    (97) element -> INTEGER .

    EQUAL           reduce using rule 107 (comp_element -> INTEGER .)
    GRATER          reduce using rule 107 (comp_element -> INTEGER .)
    GRATER_EQUAL    reduce using rule 107 (comp_element -> INTEGER .)
    LOWER           reduce using rule 107 (comp_element -> INTEGER .)
    LOWER_EQUAL     reduce using rule 107 (comp_element -> INTEGER .)
    AND             reduce using rule 107 (comp_element -> INTEGER .)
    OR              reduce using rule 107 (comp_element -> INTEGER .)
    CLOSE_PAREN     reduce using rule 107 (comp_element -> INTEGER .)
    SEMICOLON       reduce using rule 107 (comp_element -> INTEGER .)
    COMMA           reduce using rule 107 (comp_element -> INTEGER .)
    CLOSE_BRACE     reduce using rule 107 (comp_element -> INTEGER .)
    PLUS            reduce using rule 97 (element -> INTEGER .)
    MINUS           reduce using rule 97 (element -> INTEGER .)
    MULTIPLY        reduce using rule 97 (element -> INTEGER .)
    DIVISION        reduce using rule 97 (element -> INTEGER .)


state 51

    (108) comp_element -> FLOAT .
    (98) element -> FLOAT .

    EQUAL           reduce using rule 108 (comp_element -> FLOAT .)
    GRATER          reduce using rule 108 (comp_element -> FLOAT .)
    GRATER_EQUAL    reduce using rule 108 (comp_element -> FLOAT .)
    LOWER           reduce using rule 108 (comp_element -> FLOAT .)
    LOWER_EQUAL     reduce using rule 108 (comp_element -> FLOAT .)
    AND             reduce using rule 108 (comp_element -> FLOAT .)
    OR              reduce using rule 108 (comp_element -> FLOAT .)
    CLOSE_PAREN     reduce using rule 108 (comp_element -> FLOAT .)
    SEMICOLON       reduce using rule 108 (comp_element -> FLOAT .)
    COMMA           reduce using rule 108 (comp_element -> FLOAT .)
    CLOSE_BRACE     reduce using rule 108 (comp_element -> FLOAT .)
    PLUS            reduce using rule 98 (element -> FLOAT .)
    MINUS           reduce using rule 98 (element -> FLOAT .)
    MULTIPLY        reduce using rule 98 (element -> FLOAT .)
    DIVISION        reduce using rule 98 (element -> FLOAT .)


state 52

    (109) comp_element -> HEX .
    (99) element -> HEX .

    EQUAL           reduce using rule 109 (comp_element -> HEX .)
    GRATER          reduce using rule 109 (comp_element -> HEX .)
    GRATER_EQUAL    reduce using rule 109 (comp_element -> HEX .)
    LOWER           reduce using rule 109 (comp_element -> HEX .)
    LOWER_EQUAL     reduce using rule 109 (comp_element -> HEX .)
    AND             reduce using rule 109 (comp_element -> HEX .)
    OR              reduce using rule 109 (comp_element -> HEX .)
    CLOSE_PAREN     reduce using rule 109 (comp_element -> HEX .)
    SEMICOLON       reduce using rule 109 (comp_element -> HEX .)
    COMMA           reduce using rule 109 (comp_element -> HEX .)
    CLOSE_BRACE     reduce using rule 109 (comp_element -> HEX .)
    PLUS            reduce using rule 99 (element -> HEX .)
    MINUS           reduce using rule 99 (element -> HEX .)
    MULTIPLY        reduce using rule 99 (element -> HEX .)
    DIVISION        reduce using rule 99 (element -> HEX .)


state 53

    (110) comp_element -> SCIENTIFIC .
    (100) element -> SCIENTIFIC .

    EQUAL           reduce using rule 110 (comp_element -> SCIENTIFIC .)
    GRATER          reduce using rule 110 (comp_element -> SCIENTIFIC .)
    GRATER_EQUAL    reduce using rule 110 (comp_element -> SCIENTIFIC .)
    LOWER           reduce using rule 110 (comp_element -> SCIENTIFIC .)
    LOWER_EQUAL     reduce using rule 110 (comp_element -> SCIENTIFIC .)
    AND             reduce using rule 110 (comp_element -> SCIENTIFIC .)
    OR              reduce using rule 110 (comp_element -> SCIENTIFIC .)
    CLOSE_PAREN     reduce using rule 110 (comp_element -> SCIENTIFIC .)
    SEMICOLON       reduce using rule 110 (comp_element -> SCIENTIFIC .)
    COMMA           reduce using rule 110 (comp_element -> SCIENTIFIC .)
    CLOSE_BRACE     reduce using rule 110 (comp_element -> SCIENTIFIC .)
    PLUS            reduce using rule 100 (element -> SCIENTIFIC .)
    MINUS           reduce using rule 100 (element -> SCIENTIFIC .)
    MULTIPLY        reduce using rule 100 (element -> SCIENTIFIC .)
    DIVISION        reduce using rule 100 (element -> SCIENTIFIC .)


state 54

    (111) comp_element -> OCTAL .
    (101) element -> OCTAL .

    EQUAL           reduce using rule 111 (comp_element -> OCTAL .)
    GRATER          reduce using rule 111 (comp_element -> OCTAL .)
    GRATER_EQUAL    reduce using rule 111 (comp_element -> OCTAL .)
    LOWER           reduce using rule 111 (comp_element -> OCTAL .)
    LOWER_EQUAL     reduce using rule 111 (comp_element -> OCTAL .)
    AND             reduce using rule 111 (comp_element -> OCTAL .)
    OR              reduce using rule 111 (comp_element -> OCTAL .)
    CLOSE_PAREN     reduce using rule 111 (comp_element -> OCTAL .)
    SEMICOLON       reduce using rule 111 (comp_element -> OCTAL .)
    COMMA           reduce using rule 111 (comp_element -> OCTAL .)
    CLOSE_BRACE     reduce using rule 111 (comp_element -> OCTAL .)
    PLUS            reduce using rule 101 (element -> OCTAL .)
    MINUS           reduce using rule 101 (element -> OCTAL .)
    MULTIPLY        reduce using rule 101 (element -> OCTAL .)
    DIVISION        reduce using rule 101 (element -> OCTAL .)


state 55

    (112) comp_element -> BINARY .
    (102) element -> BINARY .

    EQUAL           reduce using rule 112 (comp_element -> BINARY .)
    GRATER          reduce using rule 112 (comp_element -> BINARY .)
    GRATER_EQUAL    reduce using rule 112 (comp_element -> BINARY .)
    LOWER           reduce using rule 112 (comp_element -> BINARY .)
    LOWER_EQUAL     reduce using rule 112 (comp_element -> BINARY .)
    AND             reduce using rule 112 (comp_element -> BINARY .)
    OR              reduce using rule 112 (comp_element -> BINARY .)
    CLOSE_PAREN     reduce using rule 112 (comp_element -> BINARY .)
    SEMICOLON       reduce using rule 112 (comp_element -> BINARY .)
    COMMA           reduce using rule 112 (comp_element -> BINARY .)
    CLOSE_BRACE     reduce using rule 112 (comp_element -> BINARY .)
    PLUS            reduce using rule 102 (element -> BINARY .)
    MINUS           reduce using rule 102 (element -> BINARY .)
    MULTIPLY        reduce using rule 102 (element -> BINARY .)
    DIVISION        reduce using rule 102 (element -> BINARY .)


state 56

    (114) comp_element -> expression_arith .

    EQUAL           reduce using rule 114 (comp_element -> expression_arith .)
    GRATER          reduce using rule 114 (comp_element -> expression_arith .)
    GRATER_EQUAL    reduce using rule 114 (comp_element -> expression_arith .)
    LOWER           reduce using rule 114 (comp_element -> expression_arith .)
    LOWER_EQUAL     reduce using rule 114 (comp_element -> expression_arith .)
    AND             reduce using rule 114 (comp_element -> expression_arith .)
    OR              reduce using rule 114 (comp_element -> expression_arith .)
    CLOSE_PAREN     reduce using rule 114 (comp_element -> expression_arith .)
    SEMICOLON       reduce using rule 114 (comp_element -> expression_arith .)
    COMMA           reduce using rule 114 (comp_element -> expression_arith .)
    CLOSE_BRACE     reduce using rule 114 (comp_element -> expression_arith .)


state 57

    (117) comp_element -> CHARACTER_VALUE .
    (106) element -> CHARACTER_VALUE .

    EQUAL           reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    GRATER          reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    GRATER_EQUAL    reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    LOWER           reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    LOWER_EQUAL     reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    AND             reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    OR              reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    CLOSE_PAREN     reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    SEMICOLON       reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    COMMA           reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    CLOSE_BRACE     reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    PLUS            reduce using rule 106 (element -> CHARACTER_VALUE .)
    MINUS           reduce using rule 106 (element -> CHARACTER_VALUE .)
    MULTIPLY        reduce using rule 106 (element -> CHARACTER_VALUE .)
    DIVISION        reduce using rule 106 (element -> CHARACTER_VALUE .)


state 58

    (89) expression_arith -> element . operations
    (90) operations -> . operation
    (91) operations -> . operation operations
    (92) operation -> . arithmetic_operator element
    (93) arithmetic_operator -> . PLUS
    (94) arithmetic_operator -> . MINUS
    (95) arithmetic_operator -> . MULTIPLY
    (96) arithmetic_operator -> . DIVISION

    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    MULTIPLY        shift and go to state 122
    DIVISION        shift and go to state 123

    operations                     shift and go to state 117
    operation                      shift and go to state 118
    arithmetic_operator            shift and go to state 119

state 59

    (11) loop -> WHILE OPEN_PAREN expression . CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 124


state 60

    (12) function_definition -> FUNCTION STRING OPEN_PAREN . args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (13) args_list -> . STRING COLON type
    (14) args_list -> . STRING COLON type COMMA args_list

    STRING          shift and go to state 125

    args_list                      shift and go to state 126

state 61

    (18) property_asignation -> STRING properties ASSIGN . value
    (56) value -> . CHARACTER_VALUE
    (57) value -> . INTEGER
    (58) value -> . FLOAT
    (59) value -> . HEX
    (60) value -> . SCIENTIFIC
    (61) value -> . OCTAL
    (62) value -> . BINARY
    (63) value -> . NULL
    (64) value -> . TRUE
    (65) value -> . FALSE
    (66) value -> . expression_arith
    (67) value -> . expression_comp
    (68) value -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (69) value -> . expression_logic
    (70) value -> . NOT logic_element
    (71) value -> . object
    (72) value -> . STRING properties
    (73) value -> . STRING
    (89) expression_arith -> . element operations
    (83) expression_comp -> . comp_element comp_operator comp_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (32) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (33) object -> . OPEN_BRACE CLOSE_BRACE
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element

    CHARACTER_VALUE shift and go to state 73
    INTEGER         shift and go to state 74
    FLOAT           shift and go to state 75
    HEX             shift and go to state 76
    SCIENTIFIC      shift and go to state 77
    OCTAL           shift and go to state 78
    BINARY          shift and go to state 79
    NULL            shift and go to state 80
    TRUE            shift and go to state 81
    FALSE           shift and go to state 82
    NOT             shift and go to state 85
    STRING          shift and go to state 90
    OPEN_BRACE      shift and go to state 91
    OPEN_PAREN      shift and go to state 86

    value                          shift and go to state 127
    expression_arith               shift and go to state 83
    expression_comp                shift and go to state 84
    expression_logic               shift and go to state 87
    logic_element                  shift and go to state 88
    object                         shift and go to state 89
    element                        shift and go to state 58
    comp_element                   shift and go to state 49

state 62

    (26) identifiers -> STRING .
    (27) identifiers -> STRING . COMMA identifiers

    ASSIGN          reduce using rule 26 (identifiers -> STRING .)
    COMMA           shift and go to state 28


state 63

    (27) identifiers -> STRING COMMA identifiers .

    ASSIGN          reduce using rule 27 (identifiers -> STRING COMMA identifiers .)


state 64

    (30) object_identifiers -> STRING COLON STRING .
    (31) object_identifiers -> STRING COLON STRING . COMMA object_identifiers

    ASSIGN          reduce using rule 30 (object_identifiers -> STRING COLON STRING .)
    COMMA           shift and go to state 128


state 65

    (52) properties -> dot_property properties .

    ASSIGN          reduce using rule 52 (properties -> dot_property properties .)
    EQUAL           reduce using rule 52 (properties -> dot_property properties .)
    GRATER          reduce using rule 52 (properties -> dot_property properties .)
    GRATER_EQUAL    reduce using rule 52 (properties -> dot_property properties .)
    LOWER           reduce using rule 52 (properties -> dot_property properties .)
    LOWER_EQUAL     reduce using rule 52 (properties -> dot_property properties .)
    PLUS            reduce using rule 52 (properties -> dot_property properties .)
    MINUS           reduce using rule 52 (properties -> dot_property properties .)
    MULTIPLY        reduce using rule 52 (properties -> dot_property properties .)
    DIVISION        reduce using rule 52 (properties -> dot_property properties .)
    SEMICOLON       reduce using rule 52 (properties -> dot_property properties .)
    COMMA           reduce using rule 52 (properties -> dot_property properties .)
    CLOSE_BRACE     reduce using rule 52 (properties -> dot_property properties .)
    AND             reduce using rule 52 (properties -> dot_property properties .)
    OR              reduce using rule 52 (properties -> dot_property properties .)
    CLOSE_PAREN     reduce using rule 52 (properties -> dot_property properties .)


state 66

    (53) properties -> square_property properties .

    ASSIGN          reduce using rule 53 (properties -> square_property properties .)
    EQUAL           reduce using rule 53 (properties -> square_property properties .)
    GRATER          reduce using rule 53 (properties -> square_property properties .)
    GRATER_EQUAL    reduce using rule 53 (properties -> square_property properties .)
    LOWER           reduce using rule 53 (properties -> square_property properties .)
    LOWER_EQUAL     reduce using rule 53 (properties -> square_property properties .)
    PLUS            reduce using rule 53 (properties -> square_property properties .)
    MINUS           reduce using rule 53 (properties -> square_property properties .)
    MULTIPLY        reduce using rule 53 (properties -> square_property properties .)
    DIVISION        reduce using rule 53 (properties -> square_property properties .)
    SEMICOLON       reduce using rule 53 (properties -> square_property properties .)
    COMMA           reduce using rule 53 (properties -> square_property properties .)
    CLOSE_BRACE     reduce using rule 53 (properties -> square_property properties .)
    AND             reduce using rule 53 (properties -> square_property properties .)
    OR              reduce using rule 53 (properties -> square_property properties .)
    CLOSE_PAREN     reduce using rule 53 (properties -> square_property properties .)


state 67

    (54) dot_property -> DOT STRING .

    DOT             reduce using rule 54 (dot_property -> DOT STRING .)
    OPEN_SQUARE     reduce using rule 54 (dot_property -> DOT STRING .)
    ASSIGN          reduce using rule 54 (dot_property -> DOT STRING .)
    EQUAL           reduce using rule 54 (dot_property -> DOT STRING .)
    GRATER          reduce using rule 54 (dot_property -> DOT STRING .)
    GRATER_EQUAL    reduce using rule 54 (dot_property -> DOT STRING .)
    LOWER           reduce using rule 54 (dot_property -> DOT STRING .)
    LOWER_EQUAL     reduce using rule 54 (dot_property -> DOT STRING .)
    PLUS            reduce using rule 54 (dot_property -> DOT STRING .)
    MINUS           reduce using rule 54 (dot_property -> DOT STRING .)
    MULTIPLY        reduce using rule 54 (dot_property -> DOT STRING .)
    DIVISION        reduce using rule 54 (dot_property -> DOT STRING .)
    SEMICOLON       reduce using rule 54 (dot_property -> DOT STRING .)
    COMMA           reduce using rule 54 (dot_property -> DOT STRING .)
    CLOSE_BRACE     reduce using rule 54 (dot_property -> DOT STRING .)
    AND             reduce using rule 54 (dot_property -> DOT STRING .)
    OR              reduce using rule 54 (dot_property -> DOT STRING .)
    CLOSE_PAREN     reduce using rule 54 (dot_property -> DOT STRING .)


state 68

    (55) square_property -> OPEN_SQUARE QUOTED_STRING . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 129


state 69

    (23) declaration_identifier -> STRING COMMA . declaration_identifier
    (27) identifiers -> STRING COMMA . identifiers
    (22) declaration_identifier -> . STRING
    (23) declaration_identifier -> . STRING COMMA declaration_identifier
    (24) declaration_identifier -> . STRING COLON STRING
    (25) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers

    STRING          shift and go to state 130

    declaration_identifier         shift and go to state 131
    identifiers                    shift and go to state 63

state 70

    (24) declaration_identifier -> STRING COLON . STRING
    (25) declaration_identifier -> STRING COLON . STRING COMMA declaration_identifier
    (30) object_identifiers -> STRING COLON . STRING
    (31) object_identifiers -> STRING COLON . STRING COMMA object_identifiers

    STRING          shift and go to state 132


state 71

    (21) declaration -> TYPE STRING ASSIGN . type_object
    (38) type_object -> . OPEN_BRACE type_pairs CLOSE_BRACE
    (39) type_object -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 134

    type_object                    shift and go to state 133

state 72

    (28) asignation -> identifiers ASSIGN value .

    SEMICOLON       reduce using rule 28 (asignation -> identifiers ASSIGN value .)


state 73

    (56) value -> CHARACTER_VALUE .
    (106) element -> CHARACTER_VALUE .
    (117) comp_element -> CHARACTER_VALUE .

    SEMICOLON       reduce using rule 56 (value -> CHARACTER_VALUE .)
    COMMA           reduce using rule 56 (value -> CHARACTER_VALUE .)
    CLOSE_BRACE     reduce using rule 56 (value -> CHARACTER_VALUE .)
    PLUS            reduce using rule 106 (element -> CHARACTER_VALUE .)
    MINUS           reduce using rule 106 (element -> CHARACTER_VALUE .)
    MULTIPLY        reduce using rule 106 (element -> CHARACTER_VALUE .)
    DIVISION        reduce using rule 106 (element -> CHARACTER_VALUE .)
    EQUAL           reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    GRATER          reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    GRATER_EQUAL    reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    LOWER           reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    LOWER_EQUAL     reduce using rule 117 (comp_element -> CHARACTER_VALUE .)


state 74

    (57) value -> INTEGER .
    (97) element -> INTEGER .
    (107) comp_element -> INTEGER .

    SEMICOLON       reduce using rule 57 (value -> INTEGER .)
    COMMA           reduce using rule 57 (value -> INTEGER .)
    CLOSE_BRACE     reduce using rule 57 (value -> INTEGER .)
    PLUS            reduce using rule 97 (element -> INTEGER .)
    MINUS           reduce using rule 97 (element -> INTEGER .)
    MULTIPLY        reduce using rule 97 (element -> INTEGER .)
    DIVISION        reduce using rule 97 (element -> INTEGER .)
    EQUAL           reduce using rule 107 (comp_element -> INTEGER .)
    GRATER          reduce using rule 107 (comp_element -> INTEGER .)
    GRATER_EQUAL    reduce using rule 107 (comp_element -> INTEGER .)
    LOWER           reduce using rule 107 (comp_element -> INTEGER .)
    LOWER_EQUAL     reduce using rule 107 (comp_element -> INTEGER .)


state 75

    (58) value -> FLOAT .
    (98) element -> FLOAT .
    (108) comp_element -> FLOAT .

    SEMICOLON       reduce using rule 58 (value -> FLOAT .)
    COMMA           reduce using rule 58 (value -> FLOAT .)
    CLOSE_BRACE     reduce using rule 58 (value -> FLOAT .)
    PLUS            reduce using rule 98 (element -> FLOAT .)
    MINUS           reduce using rule 98 (element -> FLOAT .)
    MULTIPLY        reduce using rule 98 (element -> FLOAT .)
    DIVISION        reduce using rule 98 (element -> FLOAT .)
    EQUAL           reduce using rule 108 (comp_element -> FLOAT .)
    GRATER          reduce using rule 108 (comp_element -> FLOAT .)
    GRATER_EQUAL    reduce using rule 108 (comp_element -> FLOAT .)
    LOWER           reduce using rule 108 (comp_element -> FLOAT .)
    LOWER_EQUAL     reduce using rule 108 (comp_element -> FLOAT .)


state 76

    (59) value -> HEX .
    (99) element -> HEX .
    (109) comp_element -> HEX .

    SEMICOLON       reduce using rule 59 (value -> HEX .)
    COMMA           reduce using rule 59 (value -> HEX .)
    CLOSE_BRACE     reduce using rule 59 (value -> HEX .)
    PLUS            reduce using rule 99 (element -> HEX .)
    MINUS           reduce using rule 99 (element -> HEX .)
    MULTIPLY        reduce using rule 99 (element -> HEX .)
    DIVISION        reduce using rule 99 (element -> HEX .)
    EQUAL           reduce using rule 109 (comp_element -> HEX .)
    GRATER          reduce using rule 109 (comp_element -> HEX .)
    GRATER_EQUAL    reduce using rule 109 (comp_element -> HEX .)
    LOWER           reduce using rule 109 (comp_element -> HEX .)
    LOWER_EQUAL     reduce using rule 109 (comp_element -> HEX .)


state 77

    (60) value -> SCIENTIFIC .
    (100) element -> SCIENTIFIC .
    (110) comp_element -> SCIENTIFIC .

    SEMICOLON       reduce using rule 60 (value -> SCIENTIFIC .)
    COMMA           reduce using rule 60 (value -> SCIENTIFIC .)
    CLOSE_BRACE     reduce using rule 60 (value -> SCIENTIFIC .)
    PLUS            reduce using rule 100 (element -> SCIENTIFIC .)
    MINUS           reduce using rule 100 (element -> SCIENTIFIC .)
    MULTIPLY        reduce using rule 100 (element -> SCIENTIFIC .)
    DIVISION        reduce using rule 100 (element -> SCIENTIFIC .)
    EQUAL           reduce using rule 110 (comp_element -> SCIENTIFIC .)
    GRATER          reduce using rule 110 (comp_element -> SCIENTIFIC .)
    GRATER_EQUAL    reduce using rule 110 (comp_element -> SCIENTIFIC .)
    LOWER           reduce using rule 110 (comp_element -> SCIENTIFIC .)
    LOWER_EQUAL     reduce using rule 110 (comp_element -> SCIENTIFIC .)


state 78

    (61) value -> OCTAL .
    (101) element -> OCTAL .
    (111) comp_element -> OCTAL .

    SEMICOLON       reduce using rule 61 (value -> OCTAL .)
    COMMA           reduce using rule 61 (value -> OCTAL .)
    CLOSE_BRACE     reduce using rule 61 (value -> OCTAL .)
    PLUS            reduce using rule 101 (element -> OCTAL .)
    MINUS           reduce using rule 101 (element -> OCTAL .)
    MULTIPLY        reduce using rule 101 (element -> OCTAL .)
    DIVISION        reduce using rule 101 (element -> OCTAL .)
    EQUAL           reduce using rule 111 (comp_element -> OCTAL .)
    GRATER          reduce using rule 111 (comp_element -> OCTAL .)
    GRATER_EQUAL    reduce using rule 111 (comp_element -> OCTAL .)
    LOWER           reduce using rule 111 (comp_element -> OCTAL .)
    LOWER_EQUAL     reduce using rule 111 (comp_element -> OCTAL .)


state 79

    (62) value -> BINARY .
    (102) element -> BINARY .
    (112) comp_element -> BINARY .

    SEMICOLON       reduce using rule 62 (value -> BINARY .)
    COMMA           reduce using rule 62 (value -> BINARY .)
    CLOSE_BRACE     reduce using rule 62 (value -> BINARY .)
    PLUS            reduce using rule 102 (element -> BINARY .)
    MINUS           reduce using rule 102 (element -> BINARY .)
    MULTIPLY        reduce using rule 102 (element -> BINARY .)
    DIVISION        reduce using rule 102 (element -> BINARY .)
    EQUAL           reduce using rule 112 (comp_element -> BINARY .)
    GRATER          reduce using rule 112 (comp_element -> BINARY .)
    GRATER_EQUAL    reduce using rule 112 (comp_element -> BINARY .)
    LOWER           reduce using rule 112 (comp_element -> BINARY .)
    LOWER_EQUAL     reduce using rule 112 (comp_element -> BINARY .)


state 80

    (63) value -> NULL .

    SEMICOLON       reduce using rule 63 (value -> NULL .)
    COMMA           reduce using rule 63 (value -> NULL .)
    CLOSE_BRACE     reduce using rule 63 (value -> NULL .)


state 81

    (64) value -> TRUE .
    (118) logic_element -> TRUE .

    SEMICOLON       reduce using rule 64 (value -> TRUE .)
    COMMA           reduce using rule 64 (value -> TRUE .)
    CLOSE_BRACE     reduce using rule 64 (value -> TRUE .)
    AND             reduce using rule 118 (logic_element -> TRUE .)
    OR              reduce using rule 118 (logic_element -> TRUE .)


state 82

    (65) value -> FALSE .
    (119) logic_element -> FALSE .

    SEMICOLON       reduce using rule 65 (value -> FALSE .)
    COMMA           reduce using rule 65 (value -> FALSE .)
    CLOSE_BRACE     reduce using rule 65 (value -> FALSE .)
    AND             reduce using rule 119 (logic_element -> FALSE .)
    OR              reduce using rule 119 (logic_element -> FALSE .)


state 83

    (66) value -> expression_arith .
    (114) comp_element -> expression_arith .

    SEMICOLON       reduce using rule 66 (value -> expression_arith .)
    COMMA           reduce using rule 66 (value -> expression_arith .)
    CLOSE_BRACE     reduce using rule 66 (value -> expression_arith .)
    EQUAL           reduce using rule 114 (comp_element -> expression_arith .)
    GRATER          reduce using rule 114 (comp_element -> expression_arith .)
    GRATER_EQUAL    reduce using rule 114 (comp_element -> expression_arith .)
    LOWER           reduce using rule 114 (comp_element -> expression_arith .)
    LOWER_EQUAL     reduce using rule 114 (comp_element -> expression_arith .)


state 84

    (67) value -> expression_comp .
    (120) logic_element -> expression_comp .

    SEMICOLON       reduce using rule 67 (value -> expression_comp .)
    COMMA           reduce using rule 67 (value -> expression_comp .)
    CLOSE_BRACE     reduce using rule 67 (value -> expression_comp .)
    AND             reduce using rule 120 (logic_element -> expression_comp .)
    OR              reduce using rule 120 (logic_element -> expression_comp .)


state 85

    (68) value -> NOT . OPEN_PAREN expression_comp CLOSE_PAREN
    (70) value -> NOT . logic_element
    (121) logic_element -> NOT . OPEN_PAREN expression_comp CLOSE_PAREN
    (124) logic_element -> NOT . logic_element
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    OPEN_PAREN      shift and go to state 135
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    STRING          shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    CHARACTER_VALUE shift and go to state 57

    expression_comp                shift and go to state 46
    logic_element                  shift and go to state 136
    comp_element                   shift and go to state 49
    expression_arith               shift and go to state 56
    element                        shift and go to state 58

state 86

    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (122) logic_element -> OPEN_PAREN . expression_logic CLOSE_PAREN
    (89) expression_arith -> . element operations
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    HEX             shift and go to state 99
    SCIENTIFIC      shift and go to state 100
    OCTAL           shift and go to state 101
    BINARY          shift and go to state 102
    STRING          shift and go to state 139
    OPEN_PAREN      shift and go to state 137
    CHARACTER_VALUE shift and go to state 103
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47

    expression_arith               shift and go to state 138
    expression_logic               shift and go to state 94
    element                        shift and go to state 58
    logic_element                  shift and go to state 88
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49

state 87

    (69) value -> expression_logic .

    SEMICOLON       reduce using rule 69 (value -> expression_logic .)
    COMMA           reduce using rule 69 (value -> expression_logic .)
    CLOSE_BRACE     reduce using rule 69 (value -> expression_logic .)


state 88

    (76) expression_logic -> logic_element . logic_operator logic_element
    (77) expression_logic -> logic_element . logic_operator logic_element logic_operations
    (78) logic_operator -> . AND
    (79) logic_operator -> . OR

    AND             shift and go to state 106
    OR              shift and go to state 107

    logic_operator                 shift and go to state 105

state 89

    (71) value -> object .

    SEMICOLON       reduce using rule 71 (value -> object .)
    COMMA           reduce using rule 71 (value -> object .)
    CLOSE_BRACE     reduce using rule 71 (value -> object .)


state 90

    (72) value -> STRING . properties
    (73) value -> STRING .
    (103) element -> STRING .
    (105) element -> STRING . properties
    (113) comp_element -> STRING .
    (116) comp_element -> STRING . properties
    (123) logic_element -> STRING .
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    SEMICOLON       reduce using rule 73 (value -> STRING .)
    COMMA           reduce using rule 73 (value -> STRING .)
    CLOSE_BRACE     reduce using rule 73 (value -> STRING .)
    PLUS            reduce using rule 103 (element -> STRING .)
    MINUS           reduce using rule 103 (element -> STRING .)
    MULTIPLY        reduce using rule 103 (element -> STRING .)
    DIVISION        reduce using rule 103 (element -> STRING .)
    EQUAL           reduce using rule 113 (comp_element -> STRING .)
    GRATER          reduce using rule 113 (comp_element -> STRING .)
    GRATER_EQUAL    reduce using rule 113 (comp_element -> STRING .)
    LOWER           reduce using rule 113 (comp_element -> STRING .)
    LOWER_EQUAL     reduce using rule 113 (comp_element -> STRING .)
    AND             reduce using rule 123 (logic_element -> STRING .)
    OR              reduce using rule 123 (logic_element -> STRING .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 140
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 91

    (32) object -> OPEN_BRACE . pairs CLOSE_BRACE
    (33) object -> OPEN_BRACE . CLOSE_BRACE
    (34) pairs -> . pair COMMA pairs
    (35) pairs -> . pair
    (36) pairs -> . pair COMMA
    (37) pair -> . key COLON value
    (44) key -> . QUOTED_STRING
    (45) key -> . STRING

    CLOSE_BRACE     shift and go to state 142
    QUOTED_STRING   shift and go to state 145
    STRING          shift and go to state 146

    pairs                          shift and go to state 141
    pair                           shift and go to state 143
    key                            shift and go to state 144

state 92

    (29) asignation -> object_identifiers ASSIGN object .

    SEMICOLON       reduce using rule 29 (asignation -> object_identifiers ASSIGN object .)


state 93

    (122) logic_element -> OPEN_PAREN . expression_logic CLOSE_PAREN
    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (89) expression_arith -> . element operations
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE

    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    OPEN_PAREN      shift and go to state 93
    STRING          shift and go to state 96
    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    HEX             shift and go to state 99
    SCIENTIFIC      shift and go to state 100
    OCTAL           shift and go to state 101
    BINARY          shift and go to state 102
    CHARACTER_VALUE shift and go to state 103

    expression_logic               shift and go to state 94
    expression_arith               shift and go to state 138
    logic_element                  shift and go to state 88
    element                        shift and go to state 58
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49

state 94

    (122) logic_element -> OPEN_PAREN expression_logic . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 147


state 95

    (115) comp_element -> OPEN_PAREN expression_arith . CLOSE_PAREN
    (104) element -> OPEN_PAREN expression_arith . CLOSE_PAREN
    (114) comp_element -> expression_arith .

    CLOSE_PAREN     shift and go to state 148
    EQUAL           reduce using rule 114 (comp_element -> expression_arith .)
    GRATER          reduce using rule 114 (comp_element -> expression_arith .)
    GRATER_EQUAL    reduce using rule 114 (comp_element -> expression_arith .)
    LOWER           reduce using rule 114 (comp_element -> expression_arith .)
    LOWER_EQUAL     reduce using rule 114 (comp_element -> expression_arith .)


state 96

    (123) logic_element -> STRING .
    (103) element -> STRING .
    (105) element -> STRING . properties
    (113) comp_element -> STRING .
    (116) comp_element -> STRING . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    AND             reduce using rule 123 (logic_element -> STRING .)
    OR              reduce using rule 123 (logic_element -> STRING .)
    PLUS            reduce using rule 103 (element -> STRING .)
    MINUS           reduce using rule 103 (element -> STRING .)
    MULTIPLY        reduce using rule 103 (element -> STRING .)
    DIVISION        reduce using rule 103 (element -> STRING .)
    EQUAL           reduce using rule 113 (comp_element -> STRING .)
    GRATER          reduce using rule 113 (comp_element -> STRING .)
    GRATER_EQUAL    reduce using rule 113 (comp_element -> STRING .)
    LOWER           reduce using rule 113 (comp_element -> STRING .)
    LOWER_EQUAL     reduce using rule 113 (comp_element -> STRING .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 149
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 97

    (97) element -> INTEGER .
    (107) comp_element -> INTEGER .

    PLUS            reduce using rule 97 (element -> INTEGER .)
    MINUS           reduce using rule 97 (element -> INTEGER .)
    MULTIPLY        reduce using rule 97 (element -> INTEGER .)
    DIVISION        reduce using rule 97 (element -> INTEGER .)
    EQUAL           reduce using rule 107 (comp_element -> INTEGER .)
    GRATER          reduce using rule 107 (comp_element -> INTEGER .)
    GRATER_EQUAL    reduce using rule 107 (comp_element -> INTEGER .)
    LOWER           reduce using rule 107 (comp_element -> INTEGER .)
    LOWER_EQUAL     reduce using rule 107 (comp_element -> INTEGER .)


state 98

    (98) element -> FLOAT .
    (108) comp_element -> FLOAT .

    PLUS            reduce using rule 98 (element -> FLOAT .)
    MINUS           reduce using rule 98 (element -> FLOAT .)
    MULTIPLY        reduce using rule 98 (element -> FLOAT .)
    DIVISION        reduce using rule 98 (element -> FLOAT .)
    EQUAL           reduce using rule 108 (comp_element -> FLOAT .)
    GRATER          reduce using rule 108 (comp_element -> FLOAT .)
    GRATER_EQUAL    reduce using rule 108 (comp_element -> FLOAT .)
    LOWER           reduce using rule 108 (comp_element -> FLOAT .)
    LOWER_EQUAL     reduce using rule 108 (comp_element -> FLOAT .)


state 99

    (99) element -> HEX .
    (109) comp_element -> HEX .

    PLUS            reduce using rule 99 (element -> HEX .)
    MINUS           reduce using rule 99 (element -> HEX .)
    MULTIPLY        reduce using rule 99 (element -> HEX .)
    DIVISION        reduce using rule 99 (element -> HEX .)
    EQUAL           reduce using rule 109 (comp_element -> HEX .)
    GRATER          reduce using rule 109 (comp_element -> HEX .)
    GRATER_EQUAL    reduce using rule 109 (comp_element -> HEX .)
    LOWER           reduce using rule 109 (comp_element -> HEX .)
    LOWER_EQUAL     reduce using rule 109 (comp_element -> HEX .)


state 100

    (100) element -> SCIENTIFIC .
    (110) comp_element -> SCIENTIFIC .

    PLUS            reduce using rule 100 (element -> SCIENTIFIC .)
    MINUS           reduce using rule 100 (element -> SCIENTIFIC .)
    MULTIPLY        reduce using rule 100 (element -> SCIENTIFIC .)
    DIVISION        reduce using rule 100 (element -> SCIENTIFIC .)
    EQUAL           reduce using rule 110 (comp_element -> SCIENTIFIC .)
    GRATER          reduce using rule 110 (comp_element -> SCIENTIFIC .)
    GRATER_EQUAL    reduce using rule 110 (comp_element -> SCIENTIFIC .)
    LOWER           reduce using rule 110 (comp_element -> SCIENTIFIC .)
    LOWER_EQUAL     reduce using rule 110 (comp_element -> SCIENTIFIC .)


state 101

    (101) element -> OCTAL .
    (111) comp_element -> OCTAL .

    PLUS            reduce using rule 101 (element -> OCTAL .)
    MINUS           reduce using rule 101 (element -> OCTAL .)
    MULTIPLY        reduce using rule 101 (element -> OCTAL .)
    DIVISION        reduce using rule 101 (element -> OCTAL .)
    EQUAL           reduce using rule 111 (comp_element -> OCTAL .)
    GRATER          reduce using rule 111 (comp_element -> OCTAL .)
    GRATER_EQUAL    reduce using rule 111 (comp_element -> OCTAL .)
    LOWER           reduce using rule 111 (comp_element -> OCTAL .)
    LOWER_EQUAL     reduce using rule 111 (comp_element -> OCTAL .)


state 102

    (102) element -> BINARY .
    (112) comp_element -> BINARY .

    PLUS            reduce using rule 102 (element -> BINARY .)
    MINUS           reduce using rule 102 (element -> BINARY .)
    MULTIPLY        reduce using rule 102 (element -> BINARY .)
    DIVISION        reduce using rule 102 (element -> BINARY .)
    EQUAL           reduce using rule 112 (comp_element -> BINARY .)
    GRATER          reduce using rule 112 (comp_element -> BINARY .)
    GRATER_EQUAL    reduce using rule 112 (comp_element -> BINARY .)
    LOWER           reduce using rule 112 (comp_element -> BINARY .)
    LOWER_EQUAL     reduce using rule 112 (comp_element -> BINARY .)


state 103

    (106) element -> CHARACTER_VALUE .
    (117) comp_element -> CHARACTER_VALUE .

    PLUS            reduce using rule 106 (element -> CHARACTER_VALUE .)
    MINUS           reduce using rule 106 (element -> CHARACTER_VALUE .)
    MULTIPLY        reduce using rule 106 (element -> CHARACTER_VALUE .)
    DIVISION        reduce using rule 106 (element -> CHARACTER_VALUE .)
    EQUAL           reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    GRATER          reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    GRATER_EQUAL    reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    LOWER           reduce using rule 117 (comp_element -> CHARACTER_VALUE .)
    LOWER_EQUAL     reduce using rule 117 (comp_element -> CHARACTER_VALUE .)


state 104

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN . OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN . OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE

    OPEN_BRACE      shift and go to state 150


state 105

    (76) expression_logic -> logic_element logic_operator . logic_element
    (77) expression_logic -> logic_element logic_operator . logic_element logic_operations
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    OPEN_PAREN      shift and go to state 40
    STRING          shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    CHARACTER_VALUE shift and go to state 57

    logic_element                  shift and go to state 151
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49
    expression_arith               shift and go to state 56
    element                        shift and go to state 58

state 106

    (78) logic_operator -> AND .

    TRUE            reduce using rule 78 (logic_operator -> AND .)
    FALSE           reduce using rule 78 (logic_operator -> AND .)
    NOT             reduce using rule 78 (logic_operator -> AND .)
    OPEN_PAREN      reduce using rule 78 (logic_operator -> AND .)
    STRING          reduce using rule 78 (logic_operator -> AND .)
    INTEGER         reduce using rule 78 (logic_operator -> AND .)
    FLOAT           reduce using rule 78 (logic_operator -> AND .)
    HEX             reduce using rule 78 (logic_operator -> AND .)
    SCIENTIFIC      reduce using rule 78 (logic_operator -> AND .)
    OCTAL           reduce using rule 78 (logic_operator -> AND .)
    BINARY          reduce using rule 78 (logic_operator -> AND .)
    CHARACTER_VALUE reduce using rule 78 (logic_operator -> AND .)


state 107

    (79) logic_operator -> OR .

    TRUE            reduce using rule 79 (logic_operator -> OR .)
    FALSE           reduce using rule 79 (logic_operator -> OR .)
    NOT             reduce using rule 79 (logic_operator -> OR .)
    OPEN_PAREN      reduce using rule 79 (logic_operator -> OR .)
    STRING          reduce using rule 79 (logic_operator -> OR .)
    INTEGER         reduce using rule 79 (logic_operator -> OR .)
    FLOAT           reduce using rule 79 (logic_operator -> OR .)
    HEX             reduce using rule 79 (logic_operator -> OR .)
    SCIENTIFIC      reduce using rule 79 (logic_operator -> OR .)
    OCTAL           reduce using rule 79 (logic_operator -> OR .)
    BINARY          reduce using rule 79 (logic_operator -> OR .)
    CHARACTER_VALUE reduce using rule 79 (logic_operator -> OR .)


state 108

    (121) logic_element -> NOT OPEN_PAREN . expression_comp CLOSE_PAREN
    (122) logic_element -> OPEN_PAREN . expression_logic CLOSE_PAREN
    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (83) expression_comp -> . comp_element comp_operator comp_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (89) expression_arith -> . element operations
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    STRING          shift and go to state 154
    OPEN_PAREN      shift and go to state 152
    CHARACTER_VALUE shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47

    expression_comp                shift and go to state 153
    expression_logic               shift and go to state 94
    expression_arith               shift and go to state 95
    comp_element                   shift and go to state 49
    logic_element                  shift and go to state 88
    element                        shift and go to state 58

state 109

    (124) logic_element -> NOT logic_element .

    AND             reduce using rule 124 (logic_element -> NOT logic_element .)
    OR              reduce using rule 124 (logic_element -> NOT logic_element .)
    CLOSE_PAREN     reduce using rule 124 (logic_element -> NOT logic_element .)
    SEMICOLON       reduce using rule 124 (logic_element -> NOT logic_element .)
    COMMA           reduce using rule 124 (logic_element -> NOT logic_element .)
    CLOSE_BRACE     reduce using rule 124 (logic_element -> NOT logic_element .)


state 110

    (116) comp_element -> STRING properties .
    (105) element -> STRING properties .

    EQUAL           reduce using rule 116 (comp_element -> STRING properties .)
    GRATER          reduce using rule 116 (comp_element -> STRING properties .)
    GRATER_EQUAL    reduce using rule 116 (comp_element -> STRING properties .)
    LOWER           reduce using rule 116 (comp_element -> STRING properties .)
    LOWER_EQUAL     reduce using rule 116 (comp_element -> STRING properties .)
    AND             reduce using rule 116 (comp_element -> STRING properties .)
    OR              reduce using rule 116 (comp_element -> STRING properties .)
    CLOSE_PAREN     reduce using rule 116 (comp_element -> STRING properties .)
    SEMICOLON       reduce using rule 116 (comp_element -> STRING properties .)
    COMMA           reduce using rule 116 (comp_element -> STRING properties .)
    CLOSE_BRACE     reduce using rule 116 (comp_element -> STRING properties .)
    PLUS            reduce using rule 105 (element -> STRING properties .)
    MINUS           reduce using rule 105 (element -> STRING properties .)
    MULTIPLY        reduce using rule 105 (element -> STRING properties .)
    DIVISION        reduce using rule 105 (element -> STRING properties .)


state 111

    (83) expression_comp -> comp_element comp_operator . comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    STRING          shift and go to state 156
    OPEN_PAREN      shift and go to state 157
    CHARACTER_VALUE shift and go to state 57

    comp_element                   shift and go to state 155
    expression_arith               shift and go to state 56
    element                        shift and go to state 58

state 112

    (84) comp_operator -> EQUAL .

    INTEGER         reduce using rule 84 (comp_operator -> EQUAL .)
    FLOAT           reduce using rule 84 (comp_operator -> EQUAL .)
    HEX             reduce using rule 84 (comp_operator -> EQUAL .)
    SCIENTIFIC      reduce using rule 84 (comp_operator -> EQUAL .)
    OCTAL           reduce using rule 84 (comp_operator -> EQUAL .)
    BINARY          reduce using rule 84 (comp_operator -> EQUAL .)
    STRING          reduce using rule 84 (comp_operator -> EQUAL .)
    OPEN_PAREN      reduce using rule 84 (comp_operator -> EQUAL .)
    CHARACTER_VALUE reduce using rule 84 (comp_operator -> EQUAL .)


state 113

    (85) comp_operator -> GRATER .

    INTEGER         reduce using rule 85 (comp_operator -> GRATER .)
    FLOAT           reduce using rule 85 (comp_operator -> GRATER .)
    HEX             reduce using rule 85 (comp_operator -> GRATER .)
    SCIENTIFIC      reduce using rule 85 (comp_operator -> GRATER .)
    OCTAL           reduce using rule 85 (comp_operator -> GRATER .)
    BINARY          reduce using rule 85 (comp_operator -> GRATER .)
    STRING          reduce using rule 85 (comp_operator -> GRATER .)
    OPEN_PAREN      reduce using rule 85 (comp_operator -> GRATER .)
    CHARACTER_VALUE reduce using rule 85 (comp_operator -> GRATER .)


state 114

    (86) comp_operator -> GRATER_EQUAL .

    INTEGER         reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    FLOAT           reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    HEX             reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    SCIENTIFIC      reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    OCTAL           reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    BINARY          reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    STRING          reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    OPEN_PAREN      reduce using rule 86 (comp_operator -> GRATER_EQUAL .)
    CHARACTER_VALUE reduce using rule 86 (comp_operator -> GRATER_EQUAL .)


state 115

    (87) comp_operator -> LOWER .

    INTEGER         reduce using rule 87 (comp_operator -> LOWER .)
    FLOAT           reduce using rule 87 (comp_operator -> LOWER .)
    HEX             reduce using rule 87 (comp_operator -> LOWER .)
    SCIENTIFIC      reduce using rule 87 (comp_operator -> LOWER .)
    OCTAL           reduce using rule 87 (comp_operator -> LOWER .)
    BINARY          reduce using rule 87 (comp_operator -> LOWER .)
    STRING          reduce using rule 87 (comp_operator -> LOWER .)
    OPEN_PAREN      reduce using rule 87 (comp_operator -> LOWER .)
    CHARACTER_VALUE reduce using rule 87 (comp_operator -> LOWER .)


state 116

    (88) comp_operator -> LOWER_EQUAL .

    INTEGER         reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    FLOAT           reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    HEX             reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    SCIENTIFIC      reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    OCTAL           reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    BINARY          reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    STRING          reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    OPEN_PAREN      reduce using rule 88 (comp_operator -> LOWER_EQUAL .)
    CHARACTER_VALUE reduce using rule 88 (comp_operator -> LOWER_EQUAL .)


state 117

    (89) expression_arith -> element operations .

    EQUAL           reduce using rule 89 (expression_arith -> element operations .)
    GRATER          reduce using rule 89 (expression_arith -> element operations .)
    GRATER_EQUAL    reduce using rule 89 (expression_arith -> element operations .)
    LOWER           reduce using rule 89 (expression_arith -> element operations .)
    LOWER_EQUAL     reduce using rule 89 (expression_arith -> element operations .)
    SEMICOLON       reduce using rule 89 (expression_arith -> element operations .)
    CLOSE_PAREN     reduce using rule 89 (expression_arith -> element operations .)
    AND             reduce using rule 89 (expression_arith -> element operations .)
    OR              reduce using rule 89 (expression_arith -> element operations .)
    COMMA           reduce using rule 89 (expression_arith -> element operations .)
    CLOSE_BRACE     reduce using rule 89 (expression_arith -> element operations .)


state 118

    (90) operations -> operation .
    (91) operations -> operation . operations
    (90) operations -> . operation
    (91) operations -> . operation operations
    (92) operation -> . arithmetic_operator element
    (93) arithmetic_operator -> . PLUS
    (94) arithmetic_operator -> . MINUS
    (95) arithmetic_operator -> . MULTIPLY
    (96) arithmetic_operator -> . DIVISION

    EQUAL           reduce using rule 90 (operations -> operation .)
    GRATER          reduce using rule 90 (operations -> operation .)
    GRATER_EQUAL    reduce using rule 90 (operations -> operation .)
    LOWER           reduce using rule 90 (operations -> operation .)
    LOWER_EQUAL     reduce using rule 90 (operations -> operation .)
    SEMICOLON       reduce using rule 90 (operations -> operation .)
    CLOSE_PAREN     reduce using rule 90 (operations -> operation .)
    AND             reduce using rule 90 (operations -> operation .)
    OR              reduce using rule 90 (operations -> operation .)
    COMMA           reduce using rule 90 (operations -> operation .)
    CLOSE_BRACE     reduce using rule 90 (operations -> operation .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    MULTIPLY        shift and go to state 122
    DIVISION        shift and go to state 123

    operation                      shift and go to state 118
    operations                     shift and go to state 158
    arithmetic_operator            shift and go to state 119

state 119

    (92) operation -> arithmetic_operator . element
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 160
    FLOAT           shift and go to state 161
    HEX             shift and go to state 162
    SCIENTIFIC      shift and go to state 163
    OCTAL           shift and go to state 164
    BINARY          shift and go to state 165
    STRING          shift and go to state 166
    OPEN_PAREN      shift and go to state 167
    CHARACTER_VALUE shift and go to state 168

    element                        shift and go to state 159

state 120

    (93) arithmetic_operator -> PLUS .

    INTEGER         reduce using rule 93 (arithmetic_operator -> PLUS .)
    FLOAT           reduce using rule 93 (arithmetic_operator -> PLUS .)
    HEX             reduce using rule 93 (arithmetic_operator -> PLUS .)
    SCIENTIFIC      reduce using rule 93 (arithmetic_operator -> PLUS .)
    OCTAL           reduce using rule 93 (arithmetic_operator -> PLUS .)
    BINARY          reduce using rule 93 (arithmetic_operator -> PLUS .)
    STRING          reduce using rule 93 (arithmetic_operator -> PLUS .)
    OPEN_PAREN      reduce using rule 93 (arithmetic_operator -> PLUS .)
    CHARACTER_VALUE reduce using rule 93 (arithmetic_operator -> PLUS .)


state 121

    (94) arithmetic_operator -> MINUS .

    INTEGER         reduce using rule 94 (arithmetic_operator -> MINUS .)
    FLOAT           reduce using rule 94 (arithmetic_operator -> MINUS .)
    HEX             reduce using rule 94 (arithmetic_operator -> MINUS .)
    SCIENTIFIC      reduce using rule 94 (arithmetic_operator -> MINUS .)
    OCTAL           reduce using rule 94 (arithmetic_operator -> MINUS .)
    BINARY          reduce using rule 94 (arithmetic_operator -> MINUS .)
    STRING          reduce using rule 94 (arithmetic_operator -> MINUS .)
    OPEN_PAREN      reduce using rule 94 (arithmetic_operator -> MINUS .)
    CHARACTER_VALUE reduce using rule 94 (arithmetic_operator -> MINUS .)


state 122

    (95) arithmetic_operator -> MULTIPLY .

    INTEGER         reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    FLOAT           reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    HEX             reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    SCIENTIFIC      reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    OCTAL           reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    BINARY          reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    STRING          reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    OPEN_PAREN      reduce using rule 95 (arithmetic_operator -> MULTIPLY .)
    CHARACTER_VALUE reduce using rule 95 (arithmetic_operator -> MULTIPLY .)


state 123

    (96) arithmetic_operator -> DIVISION .

    INTEGER         reduce using rule 96 (arithmetic_operator -> DIVISION .)
    FLOAT           reduce using rule 96 (arithmetic_operator -> DIVISION .)
    HEX             reduce using rule 96 (arithmetic_operator -> DIVISION .)
    SCIENTIFIC      reduce using rule 96 (arithmetic_operator -> DIVISION .)
    OCTAL           reduce using rule 96 (arithmetic_operator -> DIVISION .)
    BINARY          reduce using rule 96 (arithmetic_operator -> DIVISION .)
    STRING          reduce using rule 96 (arithmetic_operator -> DIVISION .)
    OPEN_PAREN      reduce using rule 96 (arithmetic_operator -> DIVISION .)
    CHARACTER_VALUE reduce using rule 96 (arithmetic_operator -> DIVISION .)


state 124

    (11) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN . OPEN_BRACE statementList CLOSE_BRACE

    OPEN_BRACE      shift and go to state 169


state 125

    (13) args_list -> STRING . COLON type
    (14) args_list -> STRING . COLON type COMMA args_list

    COLON           shift and go to state 170


state 126

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list . CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 171


state 127

    (18) property_asignation -> STRING properties ASSIGN value .

    SEMICOLON       reduce using rule 18 (property_asignation -> STRING properties ASSIGN value .)


state 128

    (31) object_identifiers -> STRING COLON STRING COMMA . object_identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    STRING          shift and go to state 172

    object_identifiers             shift and go to state 173

state 129

    (55) square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .

    DOT             reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    ASSIGN          reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    EQUAL           reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    GRATER          reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    GRATER_EQUAL    reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    LOWER           reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    LOWER_EQUAL     reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    PLUS            reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    MINUS           reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    DIVISION        reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    SEMICOLON       reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    COMMA           reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    AND             reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    OR              reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 55 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)


state 130

    (22) declaration_identifier -> STRING .
    (23) declaration_identifier -> STRING . COMMA declaration_identifier
    (24) declaration_identifier -> STRING . COLON STRING
    (25) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier
    (26) identifiers -> STRING .
    (27) identifiers -> STRING . COMMA identifiers

    SEMICOLON       reduce using rule 22 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 69
    COLON           shift and go to state 174
    ASSIGN          reduce using rule 26 (identifiers -> STRING .)


state 131

    (23) declaration_identifier -> STRING COMMA declaration_identifier .

    SEMICOLON       reduce using rule 23 (declaration_identifier -> STRING COMMA declaration_identifier .)


state 132

    (24) declaration_identifier -> STRING COLON STRING .
    (25) declaration_identifier -> STRING COLON STRING . COMMA declaration_identifier
    (30) object_identifiers -> STRING COLON STRING .
    (31) object_identifiers -> STRING COLON STRING . COMMA object_identifiers

    SEMICOLON       reduce using rule 24 (declaration_identifier -> STRING COLON STRING .)
    COMMA           shift and go to state 175
    ASSIGN          reduce using rule 30 (object_identifiers -> STRING COLON STRING .)


state 133

    (21) declaration -> TYPE STRING ASSIGN type_object .

    SEMICOLON       reduce using rule 21 (declaration -> TYPE STRING ASSIGN type_object .)


state 134

    (38) type_object -> OPEN_BRACE . type_pairs CLOSE_BRACE
    (39) type_object -> OPEN_BRACE . CLOSE_BRACE
    (40) type_pairs -> . type_pair COMMA type_pairs
    (41) type_pairs -> . type_pair
    (42) type_pairs -> . type_pair COMMA
    (43) type_pair -> . key COLON type
    (44) key -> . QUOTED_STRING
    (45) key -> . STRING

    CLOSE_BRACE     shift and go to state 177
    QUOTED_STRING   shift and go to state 145
    STRING          shift and go to state 146

    type_pairs                     shift and go to state 176
    type_pair                      shift and go to state 178
    key                            shift and go to state 179

state 135

    (68) value -> NOT OPEN_PAREN . expression_comp CLOSE_PAREN
    (121) logic_element -> NOT OPEN_PAREN . expression_comp CLOSE_PAREN
    (122) logic_element -> OPEN_PAREN . expression_logic CLOSE_PAREN
    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (83) expression_comp -> . comp_element comp_operator comp_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (89) expression_arith -> . element operations
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    STRING          shift and go to state 154
    OPEN_PAREN      shift and go to state 152
    CHARACTER_VALUE shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47

    expression_comp                shift and go to state 180
    expression_logic               shift and go to state 94
    expression_arith               shift and go to state 95
    comp_element                   shift and go to state 49
    logic_element                  shift and go to state 88
    element                        shift and go to state 58

state 136

    (70) value -> NOT logic_element .
    (124) logic_element -> NOT logic_element .

    SEMICOLON       reduce using rule 70 (value -> NOT logic_element .)
    COMMA           reduce using rule 70 (value -> NOT logic_element .)
    CLOSE_BRACE     reduce using rule 70 (value -> NOT logic_element .)
    AND             reduce using rule 124 (logic_element -> NOT logic_element .)
    OR              reduce using rule 124 (logic_element -> NOT logic_element .)


state 137

    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (122) logic_element -> OPEN_PAREN . expression_logic CLOSE_PAREN
    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (89) expression_arith -> . element operations
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    HEX             shift and go to state 99
    SCIENTIFIC      shift and go to state 100
    OCTAL           shift and go to state 101
    BINARY          shift and go to state 102
    STRING          shift and go to state 139
    OPEN_PAREN      shift and go to state 137
    CHARACTER_VALUE shift and go to state 103
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47

    expression_arith               shift and go to state 138
    expression_logic               shift and go to state 94
    element                        shift and go to state 58
    logic_element                  shift and go to state 88
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49

state 138

    (104) element -> OPEN_PAREN expression_arith . CLOSE_PAREN
    (115) comp_element -> OPEN_PAREN expression_arith . CLOSE_PAREN
    (114) comp_element -> expression_arith .

    CLOSE_PAREN     shift and go to state 181
    EQUAL           reduce using rule 114 (comp_element -> expression_arith .)
    GRATER          reduce using rule 114 (comp_element -> expression_arith .)
    GRATER_EQUAL    reduce using rule 114 (comp_element -> expression_arith .)
    LOWER           reduce using rule 114 (comp_element -> expression_arith .)
    LOWER_EQUAL     reduce using rule 114 (comp_element -> expression_arith .)


state 139

    (103) element -> STRING .
    (105) element -> STRING . properties
    (123) logic_element -> STRING .
    (113) comp_element -> STRING .
    (116) comp_element -> STRING . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    PLUS            reduce using rule 103 (element -> STRING .)
    MINUS           reduce using rule 103 (element -> STRING .)
    MULTIPLY        reduce using rule 103 (element -> STRING .)
    DIVISION        reduce using rule 103 (element -> STRING .)
    AND             reduce using rule 123 (logic_element -> STRING .)
    OR              reduce using rule 123 (logic_element -> STRING .)
    EQUAL           reduce using rule 113 (comp_element -> STRING .)
    GRATER          reduce using rule 113 (comp_element -> STRING .)
    GRATER_EQUAL    reduce using rule 113 (comp_element -> STRING .)
    LOWER           reduce using rule 113 (comp_element -> STRING .)
    LOWER_EQUAL     reduce using rule 113 (comp_element -> STRING .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 149
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 140

    (72) value -> STRING properties .
    (105) element -> STRING properties .
    (116) comp_element -> STRING properties .

    SEMICOLON       reduce using rule 72 (value -> STRING properties .)
    COMMA           reduce using rule 72 (value -> STRING properties .)
    CLOSE_BRACE     reduce using rule 72 (value -> STRING properties .)
    PLUS            reduce using rule 105 (element -> STRING properties .)
    MINUS           reduce using rule 105 (element -> STRING properties .)
    MULTIPLY        reduce using rule 105 (element -> STRING properties .)
    DIVISION        reduce using rule 105 (element -> STRING properties .)
    EQUAL           reduce using rule 116 (comp_element -> STRING properties .)
    GRATER          reduce using rule 116 (comp_element -> STRING properties .)
    GRATER_EQUAL    reduce using rule 116 (comp_element -> STRING properties .)
    LOWER           reduce using rule 116 (comp_element -> STRING properties .)
    LOWER_EQUAL     reduce using rule 116 (comp_element -> STRING properties .)


state 141

    (32) object -> OPEN_BRACE pairs . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 182


state 142

    (33) object -> OPEN_BRACE CLOSE_BRACE .

    SEMICOLON       reduce using rule 33 (object -> OPEN_BRACE CLOSE_BRACE .)
    COMMA           reduce using rule 33 (object -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 33 (object -> OPEN_BRACE CLOSE_BRACE .)


state 143

    (34) pairs -> pair . COMMA pairs
    (35) pairs -> pair .
    (36) pairs -> pair . COMMA

    COMMA           shift and go to state 183
    CLOSE_BRACE     reduce using rule 35 (pairs -> pair .)


state 144

    (37) pair -> key . COLON value

    COLON           shift and go to state 184


state 145

    (44) key -> QUOTED_STRING .

    COLON           reduce using rule 44 (key -> QUOTED_STRING .)


state 146

    (45) key -> STRING .

    COLON           reduce using rule 45 (key -> STRING .)


state 147

    (122) logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN .

    AND             reduce using rule 122 (logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN .)
    OR              reduce using rule 122 (logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 122 (logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN .)
    SEMICOLON       reduce using rule 122 (logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN .)
    COMMA           reduce using rule 122 (logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 122 (logic_element -> OPEN_PAREN expression_logic CLOSE_PAREN .)


state 148

    (115) comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .
    (104) element -> OPEN_PAREN expression_arith CLOSE_PAREN .

    EQUAL           reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    GRATER          reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    GRATER_EQUAL    reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    LOWER           reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    LOWER_EQUAL     reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    AND             reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    OR              reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    SEMICOLON       reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    COMMA           reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    PLUS            reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    MINUS           reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    MULTIPLY        reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    DIVISION        reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)


state 149

    (105) element -> STRING properties .
    (116) comp_element -> STRING properties .

    PLUS            reduce using rule 105 (element -> STRING properties .)
    MINUS           reduce using rule 105 (element -> STRING properties .)
    MULTIPLY        reduce using rule 105 (element -> STRING properties .)
    DIVISION        reduce using rule 105 (element -> STRING properties .)
    EQUAL           reduce using rule 116 (comp_element -> STRING properties .)
    GRATER          reduce using rule 116 (comp_element -> STRING properties .)
    GRATER_EQUAL    reduce using rule 116 (comp_element -> STRING properties .)
    LOWER           reduce using rule 116 (comp_element -> STRING properties .)
    LOWER_EQUAL     reduce using rule 116 (comp_element -> STRING properties .)


state 150

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE . statementList CLOSE_BRACE
    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE . statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 185
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 151

    (76) expression_logic -> logic_element logic_operator logic_element .
    (77) expression_logic -> logic_element logic_operator logic_element . logic_operations
    (80) logic_operations -> . logic_operation
    (81) logic_operations -> . logic_operation logic_operations
    (82) logic_operation -> . logic_operator logic_element
    (78) logic_operator -> . AND
    (79) logic_operator -> . OR

    CLOSE_PAREN     reduce using rule 76 (expression_logic -> logic_element logic_operator logic_element .)
    SEMICOLON       reduce using rule 76 (expression_logic -> logic_element logic_operator logic_element .)
    COMMA           reduce using rule 76 (expression_logic -> logic_element logic_operator logic_element .)
    CLOSE_BRACE     reduce using rule 76 (expression_logic -> logic_element logic_operator logic_element .)
    AND             shift and go to state 106
    OR              shift and go to state 107

    logic_operator                 shift and go to state 186
    logic_operations               shift and go to state 187
    logic_operation                shift and go to state 188

state 152

    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (122) logic_element -> OPEN_PAREN . expression_logic CLOSE_PAREN
    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (89) expression_arith -> . element operations
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    HEX             shift and go to state 99
    SCIENTIFIC      shift and go to state 100
    OCTAL           shift and go to state 101
    BINARY          shift and go to state 102
    STRING          shift and go to state 139
    OPEN_PAREN      shift and go to state 137
    CHARACTER_VALUE shift and go to state 103
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47

    expression_arith               shift and go to state 95
    expression_logic               shift and go to state 94
    element                        shift and go to state 58
    logic_element                  shift and go to state 88
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49

state 153

    (121) logic_element -> NOT OPEN_PAREN expression_comp . CLOSE_PAREN
    (120) logic_element -> expression_comp .

    CLOSE_PAREN     shift and go to state 189
    AND             reduce using rule 120 (logic_element -> expression_comp .)
    OR              reduce using rule 120 (logic_element -> expression_comp .)


state 154

    (113) comp_element -> STRING .
    (116) comp_element -> STRING . properties
    (123) logic_element -> STRING .
    (103) element -> STRING .
    (105) element -> STRING . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    EQUAL           reduce using rule 113 (comp_element -> STRING .)
    GRATER          reduce using rule 113 (comp_element -> STRING .)
    GRATER_EQUAL    reduce using rule 113 (comp_element -> STRING .)
    LOWER           reduce using rule 113 (comp_element -> STRING .)
    LOWER_EQUAL     reduce using rule 113 (comp_element -> STRING .)
    AND             reduce using rule 123 (logic_element -> STRING .)
    OR              reduce using rule 123 (logic_element -> STRING .)
    PLUS            reduce using rule 103 (element -> STRING .)
    MINUS           reduce using rule 103 (element -> STRING .)
    MULTIPLY        reduce using rule 103 (element -> STRING .)
    DIVISION        reduce using rule 103 (element -> STRING .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 110
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 155

    (83) expression_comp -> comp_element comp_operator comp_element .

    AND             reduce using rule 83 (expression_comp -> comp_element comp_operator comp_element .)
    OR              reduce using rule 83 (expression_comp -> comp_element comp_operator comp_element .)
    CLOSE_PAREN     reduce using rule 83 (expression_comp -> comp_element comp_operator comp_element .)
    SEMICOLON       reduce using rule 83 (expression_comp -> comp_element comp_operator comp_element .)
    COMMA           reduce using rule 83 (expression_comp -> comp_element comp_operator comp_element .)
    CLOSE_BRACE     reduce using rule 83 (expression_comp -> comp_element comp_operator comp_element .)


state 156

    (113) comp_element -> STRING .
    (116) comp_element -> STRING . properties
    (103) element -> STRING .
    (105) element -> STRING . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    AND             reduce using rule 113 (comp_element -> STRING .)
    OR              reduce using rule 113 (comp_element -> STRING .)
    CLOSE_PAREN     reduce using rule 113 (comp_element -> STRING .)
    SEMICOLON       reduce using rule 113 (comp_element -> STRING .)
    COMMA           reduce using rule 113 (comp_element -> STRING .)
    CLOSE_BRACE     reduce using rule 113 (comp_element -> STRING .)
    PLUS            reduce using rule 103 (element -> STRING .)
    MINUS           reduce using rule 103 (element -> STRING .)
    MULTIPLY        reduce using rule 103 (element -> STRING .)
    DIVISION        reduce using rule 103 (element -> STRING .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 110
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 157

    (115) comp_element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 160
    FLOAT           shift and go to state 161
    HEX             shift and go to state 162
    SCIENTIFIC      shift and go to state 163
    OCTAL           shift and go to state 164
    BINARY          shift and go to state 165
    STRING          shift and go to state 166
    OPEN_PAREN      shift and go to state 167
    CHARACTER_VALUE shift and go to state 168

    expression_arith               shift and go to state 190
    element                        shift and go to state 58

state 158

    (91) operations -> operation operations .

    EQUAL           reduce using rule 91 (operations -> operation operations .)
    GRATER          reduce using rule 91 (operations -> operation operations .)
    GRATER_EQUAL    reduce using rule 91 (operations -> operation operations .)
    LOWER           reduce using rule 91 (operations -> operation operations .)
    LOWER_EQUAL     reduce using rule 91 (operations -> operation operations .)
    SEMICOLON       reduce using rule 91 (operations -> operation operations .)
    CLOSE_PAREN     reduce using rule 91 (operations -> operation operations .)
    AND             reduce using rule 91 (operations -> operation operations .)
    OR              reduce using rule 91 (operations -> operation operations .)
    COMMA           reduce using rule 91 (operations -> operation operations .)
    CLOSE_BRACE     reduce using rule 91 (operations -> operation operations .)


state 159

    (92) operation -> arithmetic_operator element .

    PLUS            reduce using rule 92 (operation -> arithmetic_operator element .)
    MINUS           reduce using rule 92 (operation -> arithmetic_operator element .)
    MULTIPLY        reduce using rule 92 (operation -> arithmetic_operator element .)
    DIVISION        reduce using rule 92 (operation -> arithmetic_operator element .)
    EQUAL           reduce using rule 92 (operation -> arithmetic_operator element .)
    GRATER          reduce using rule 92 (operation -> arithmetic_operator element .)
    GRATER_EQUAL    reduce using rule 92 (operation -> arithmetic_operator element .)
    LOWER           reduce using rule 92 (operation -> arithmetic_operator element .)
    LOWER_EQUAL     reduce using rule 92 (operation -> arithmetic_operator element .)
    SEMICOLON       reduce using rule 92 (operation -> arithmetic_operator element .)
    CLOSE_PAREN     reduce using rule 92 (operation -> arithmetic_operator element .)
    AND             reduce using rule 92 (operation -> arithmetic_operator element .)
    OR              reduce using rule 92 (operation -> arithmetic_operator element .)
    COMMA           reduce using rule 92 (operation -> arithmetic_operator element .)
    CLOSE_BRACE     reduce using rule 92 (operation -> arithmetic_operator element .)


state 160

    (97) element -> INTEGER .

    PLUS            reduce using rule 97 (element -> INTEGER .)
    MINUS           reduce using rule 97 (element -> INTEGER .)
    MULTIPLY        reduce using rule 97 (element -> INTEGER .)
    DIVISION        reduce using rule 97 (element -> INTEGER .)
    EQUAL           reduce using rule 97 (element -> INTEGER .)
    GRATER          reduce using rule 97 (element -> INTEGER .)
    GRATER_EQUAL    reduce using rule 97 (element -> INTEGER .)
    LOWER           reduce using rule 97 (element -> INTEGER .)
    LOWER_EQUAL     reduce using rule 97 (element -> INTEGER .)
    SEMICOLON       reduce using rule 97 (element -> INTEGER .)
    CLOSE_PAREN     reduce using rule 97 (element -> INTEGER .)
    AND             reduce using rule 97 (element -> INTEGER .)
    OR              reduce using rule 97 (element -> INTEGER .)
    COMMA           reduce using rule 97 (element -> INTEGER .)
    CLOSE_BRACE     reduce using rule 97 (element -> INTEGER .)


state 161

    (98) element -> FLOAT .

    PLUS            reduce using rule 98 (element -> FLOAT .)
    MINUS           reduce using rule 98 (element -> FLOAT .)
    MULTIPLY        reduce using rule 98 (element -> FLOAT .)
    DIVISION        reduce using rule 98 (element -> FLOAT .)
    EQUAL           reduce using rule 98 (element -> FLOAT .)
    GRATER          reduce using rule 98 (element -> FLOAT .)
    GRATER_EQUAL    reduce using rule 98 (element -> FLOAT .)
    LOWER           reduce using rule 98 (element -> FLOAT .)
    LOWER_EQUAL     reduce using rule 98 (element -> FLOAT .)
    SEMICOLON       reduce using rule 98 (element -> FLOAT .)
    CLOSE_PAREN     reduce using rule 98 (element -> FLOAT .)
    AND             reduce using rule 98 (element -> FLOAT .)
    OR              reduce using rule 98 (element -> FLOAT .)
    COMMA           reduce using rule 98 (element -> FLOAT .)
    CLOSE_BRACE     reduce using rule 98 (element -> FLOAT .)


state 162

    (99) element -> HEX .

    PLUS            reduce using rule 99 (element -> HEX .)
    MINUS           reduce using rule 99 (element -> HEX .)
    MULTIPLY        reduce using rule 99 (element -> HEX .)
    DIVISION        reduce using rule 99 (element -> HEX .)
    EQUAL           reduce using rule 99 (element -> HEX .)
    GRATER          reduce using rule 99 (element -> HEX .)
    GRATER_EQUAL    reduce using rule 99 (element -> HEX .)
    LOWER           reduce using rule 99 (element -> HEX .)
    LOWER_EQUAL     reduce using rule 99 (element -> HEX .)
    SEMICOLON       reduce using rule 99 (element -> HEX .)
    CLOSE_PAREN     reduce using rule 99 (element -> HEX .)
    AND             reduce using rule 99 (element -> HEX .)
    OR              reduce using rule 99 (element -> HEX .)
    COMMA           reduce using rule 99 (element -> HEX .)
    CLOSE_BRACE     reduce using rule 99 (element -> HEX .)


state 163

    (100) element -> SCIENTIFIC .

    PLUS            reduce using rule 100 (element -> SCIENTIFIC .)
    MINUS           reduce using rule 100 (element -> SCIENTIFIC .)
    MULTIPLY        reduce using rule 100 (element -> SCIENTIFIC .)
    DIVISION        reduce using rule 100 (element -> SCIENTIFIC .)
    EQUAL           reduce using rule 100 (element -> SCIENTIFIC .)
    GRATER          reduce using rule 100 (element -> SCIENTIFIC .)
    GRATER_EQUAL    reduce using rule 100 (element -> SCIENTIFIC .)
    LOWER           reduce using rule 100 (element -> SCIENTIFIC .)
    LOWER_EQUAL     reduce using rule 100 (element -> SCIENTIFIC .)
    SEMICOLON       reduce using rule 100 (element -> SCIENTIFIC .)
    CLOSE_PAREN     reduce using rule 100 (element -> SCIENTIFIC .)
    AND             reduce using rule 100 (element -> SCIENTIFIC .)
    OR              reduce using rule 100 (element -> SCIENTIFIC .)
    COMMA           reduce using rule 100 (element -> SCIENTIFIC .)
    CLOSE_BRACE     reduce using rule 100 (element -> SCIENTIFIC .)


state 164

    (101) element -> OCTAL .

    PLUS            reduce using rule 101 (element -> OCTAL .)
    MINUS           reduce using rule 101 (element -> OCTAL .)
    MULTIPLY        reduce using rule 101 (element -> OCTAL .)
    DIVISION        reduce using rule 101 (element -> OCTAL .)
    EQUAL           reduce using rule 101 (element -> OCTAL .)
    GRATER          reduce using rule 101 (element -> OCTAL .)
    GRATER_EQUAL    reduce using rule 101 (element -> OCTAL .)
    LOWER           reduce using rule 101 (element -> OCTAL .)
    LOWER_EQUAL     reduce using rule 101 (element -> OCTAL .)
    SEMICOLON       reduce using rule 101 (element -> OCTAL .)
    CLOSE_PAREN     reduce using rule 101 (element -> OCTAL .)
    AND             reduce using rule 101 (element -> OCTAL .)
    OR              reduce using rule 101 (element -> OCTAL .)
    COMMA           reduce using rule 101 (element -> OCTAL .)
    CLOSE_BRACE     reduce using rule 101 (element -> OCTAL .)


state 165

    (102) element -> BINARY .

    PLUS            reduce using rule 102 (element -> BINARY .)
    MINUS           reduce using rule 102 (element -> BINARY .)
    MULTIPLY        reduce using rule 102 (element -> BINARY .)
    DIVISION        reduce using rule 102 (element -> BINARY .)
    EQUAL           reduce using rule 102 (element -> BINARY .)
    GRATER          reduce using rule 102 (element -> BINARY .)
    GRATER_EQUAL    reduce using rule 102 (element -> BINARY .)
    LOWER           reduce using rule 102 (element -> BINARY .)
    LOWER_EQUAL     reduce using rule 102 (element -> BINARY .)
    SEMICOLON       reduce using rule 102 (element -> BINARY .)
    CLOSE_PAREN     reduce using rule 102 (element -> BINARY .)
    AND             reduce using rule 102 (element -> BINARY .)
    OR              reduce using rule 102 (element -> BINARY .)
    COMMA           reduce using rule 102 (element -> BINARY .)
    CLOSE_BRACE     reduce using rule 102 (element -> BINARY .)


state 166

    (103) element -> STRING .
    (105) element -> STRING . properties
    (50) properties -> . dot_property
    (51) properties -> . square_property
    (52) properties -> . dot_property properties
    (53) properties -> . square_property properties
    (54) dot_property -> . DOT STRING
    (55) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    PLUS            reduce using rule 103 (element -> STRING .)
    MINUS           reduce using rule 103 (element -> STRING .)
    MULTIPLY        reduce using rule 103 (element -> STRING .)
    DIVISION        reduce using rule 103 (element -> STRING .)
    EQUAL           reduce using rule 103 (element -> STRING .)
    GRATER          reduce using rule 103 (element -> STRING .)
    GRATER_EQUAL    reduce using rule 103 (element -> STRING .)
    LOWER           reduce using rule 103 (element -> STRING .)
    LOWER_EQUAL     reduce using rule 103 (element -> STRING .)
    SEMICOLON       reduce using rule 103 (element -> STRING .)
    CLOSE_PAREN     reduce using rule 103 (element -> STRING .)
    AND             reduce using rule 103 (element -> STRING .)
    OR              reduce using rule 103 (element -> STRING .)
    COMMA           reduce using rule 103 (element -> STRING .)
    CLOSE_BRACE     reduce using rule 103 (element -> STRING .)
    DOT             shift and go to state 32
    OPEN_SQUARE     shift and go to state 33

    properties                     shift and go to state 191
    dot_property                   shift and go to state 30
    square_property                shift and go to state 31

state 167

    (104) element -> OPEN_PAREN . expression_arith CLOSE_PAREN
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    INTEGER         shift and go to state 160
    FLOAT           shift and go to state 161
    HEX             shift and go to state 162
    SCIENTIFIC      shift and go to state 163
    OCTAL           shift and go to state 164
    BINARY          shift and go to state 165
    STRING          shift and go to state 166
    OPEN_PAREN      shift and go to state 167
    CHARACTER_VALUE shift and go to state 168

    expression_arith               shift and go to state 192
    element                        shift and go to state 58

state 168

    (106) element -> CHARACTER_VALUE .

    PLUS            reduce using rule 106 (element -> CHARACTER_VALUE .)
    MINUS           reduce using rule 106 (element -> CHARACTER_VALUE .)
    MULTIPLY        reduce using rule 106 (element -> CHARACTER_VALUE .)
    DIVISION        reduce using rule 106 (element -> CHARACTER_VALUE .)
    EQUAL           reduce using rule 106 (element -> CHARACTER_VALUE .)
    GRATER          reduce using rule 106 (element -> CHARACTER_VALUE .)
    GRATER_EQUAL    reduce using rule 106 (element -> CHARACTER_VALUE .)
    LOWER           reduce using rule 106 (element -> CHARACTER_VALUE .)
    LOWER_EQUAL     reduce using rule 106 (element -> CHARACTER_VALUE .)
    SEMICOLON       reduce using rule 106 (element -> CHARACTER_VALUE .)
    CLOSE_PAREN     reduce using rule 106 (element -> CHARACTER_VALUE .)
    AND             reduce using rule 106 (element -> CHARACTER_VALUE .)
    OR              reduce using rule 106 (element -> CHARACTER_VALUE .)
    COMMA           reduce using rule 106 (element -> CHARACTER_VALUE .)
    CLOSE_BRACE     reduce using rule 106 (element -> CHARACTER_VALUE .)


state 169

    (11) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE . statementList CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 193
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 170

    (13) args_list -> STRING COLON . type
    (14) args_list -> STRING COLON . type COMMA args_list
    (46) type -> . CHARACTER
    (47) type -> . INT_TYPE
    (48) type -> . FLOAT_TYPE
    (49) type -> . BOOLEAN

    CHARACTER       shift and go to state 195
    INT_TYPE        shift and go to state 196
    FLOAT_TYPE      shift and go to state 197
    BOOLEAN         shift and go to state 198

    type                           shift and go to state 194

state 171

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN . COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    COLON           shift and go to state 199


state 172

    (30) object_identifiers -> STRING . COLON STRING
    (31) object_identifiers -> STRING . COLON STRING COMMA object_identifiers

    COLON           shift and go to state 29


state 173

    (31) object_identifiers -> STRING COLON STRING COMMA object_identifiers .

    ASSIGN          reduce using rule 31 (object_identifiers -> STRING COLON STRING COMMA object_identifiers .)


state 174

    (24) declaration_identifier -> STRING COLON . STRING
    (25) declaration_identifier -> STRING COLON . STRING COMMA declaration_identifier

    STRING          shift and go to state 200


state 175

    (25) declaration_identifier -> STRING COLON STRING COMMA . declaration_identifier
    (31) object_identifiers -> STRING COLON STRING COMMA . object_identifiers
    (22) declaration_identifier -> . STRING
    (23) declaration_identifier -> . STRING COMMA declaration_identifier
    (24) declaration_identifier -> . STRING COLON STRING
    (25) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    STRING          shift and go to state 201

    declaration_identifier         shift and go to state 202
    object_identifiers             shift and go to state 173

state 176

    (38) type_object -> OPEN_BRACE type_pairs . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 203


state 177

    (39) type_object -> OPEN_BRACE CLOSE_BRACE .

    SEMICOLON       reduce using rule 39 (type_object -> OPEN_BRACE CLOSE_BRACE .)


state 178

    (40) type_pairs -> type_pair . COMMA type_pairs
    (41) type_pairs -> type_pair .
    (42) type_pairs -> type_pair . COMMA

    COMMA           shift and go to state 204
    CLOSE_BRACE     reduce using rule 41 (type_pairs -> type_pair .)


state 179

    (43) type_pair -> key . COLON type

    COLON           shift and go to state 205


state 180

    (68) value -> NOT OPEN_PAREN expression_comp . CLOSE_PAREN
    (121) logic_element -> NOT OPEN_PAREN expression_comp . CLOSE_PAREN
    (120) logic_element -> expression_comp .

    CLOSE_PAREN     shift and go to state 206
    AND             reduce using rule 120 (logic_element -> expression_comp .)
    OR              reduce using rule 120 (logic_element -> expression_comp .)


state 181

    (104) element -> OPEN_PAREN expression_arith CLOSE_PAREN .
    (115) comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .

    PLUS            reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    MINUS           reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    MULTIPLY        reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    DIVISION        reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    EQUAL           reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    GRATER          reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    GRATER_EQUAL    reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    LOWER           reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    LOWER_EQUAL     reduce using rule 115 (comp_element -> OPEN_PAREN expression_arith CLOSE_PAREN .)


state 182

    (32) object -> OPEN_BRACE pairs CLOSE_BRACE .

    SEMICOLON       reduce using rule 32 (object -> OPEN_BRACE pairs CLOSE_BRACE .)
    COMMA           reduce using rule 32 (object -> OPEN_BRACE pairs CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 32 (object -> OPEN_BRACE pairs CLOSE_BRACE .)


state 183

    (34) pairs -> pair COMMA . pairs
    (36) pairs -> pair COMMA .
    (34) pairs -> . pair COMMA pairs
    (35) pairs -> . pair
    (36) pairs -> . pair COMMA
    (37) pair -> . key COLON value
    (44) key -> . QUOTED_STRING
    (45) key -> . STRING

    CLOSE_BRACE     reduce using rule 36 (pairs -> pair COMMA .)
    QUOTED_STRING   shift and go to state 145
    STRING          shift and go to state 146

    pair                           shift and go to state 143
    pairs                          shift and go to state 207
    key                            shift and go to state 144

state 184

    (37) pair -> key COLON . value
    (56) value -> . CHARACTER_VALUE
    (57) value -> . INTEGER
    (58) value -> . FLOAT
    (59) value -> . HEX
    (60) value -> . SCIENTIFIC
    (61) value -> . OCTAL
    (62) value -> . BINARY
    (63) value -> . NULL
    (64) value -> . TRUE
    (65) value -> . FALSE
    (66) value -> . expression_arith
    (67) value -> . expression_comp
    (68) value -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (69) value -> . expression_logic
    (70) value -> . NOT logic_element
    (71) value -> . object
    (72) value -> . STRING properties
    (73) value -> . STRING
    (89) expression_arith -> . element operations
    (83) expression_comp -> . comp_element comp_operator comp_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (32) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (33) object -> . OPEN_BRACE CLOSE_BRACE
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element

    CHARACTER_VALUE shift and go to state 73
    INTEGER         shift and go to state 74
    FLOAT           shift and go to state 75
    HEX             shift and go to state 76
    SCIENTIFIC      shift and go to state 77
    OCTAL           shift and go to state 78
    BINARY          shift and go to state 79
    NULL            shift and go to state 80
    TRUE            shift and go to state 81
    FALSE           shift and go to state 82
    NOT             shift and go to state 85
    STRING          shift and go to state 90
    OPEN_BRACE      shift and go to state 91
    OPEN_PAREN      shift and go to state 86

    value                          shift and go to state 208
    expression_arith               shift and go to state 83
    expression_comp                shift and go to state 84
    expression_logic               shift and go to state 87
    logic_element                  shift and go to state 88
    object                         shift and go to state 89
    element                        shift and go to state 58
    comp_element                   shift and go to state 49

state 185

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList . CLOSE_BRACE
    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList . CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    CLOSE_BRACE     shift and go to state 209
    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 186

    (82) logic_operation -> logic_operator . logic_element
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element
    (83) expression_comp -> . comp_element comp_operator comp_element
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (89) expression_arith -> . element operations
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE

    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NOT             shift and go to state 47
    OPEN_PAREN      shift and go to state 40
    STRING          shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    HEX             shift and go to state 52
    SCIENTIFIC      shift and go to state 53
    OCTAL           shift and go to state 54
    BINARY          shift and go to state 55
    CHARACTER_VALUE shift and go to state 57

    logic_element                  shift and go to state 210
    expression_comp                shift and go to state 46
    comp_element                   shift and go to state 49
    expression_arith               shift and go to state 56
    element                        shift and go to state 58

state 187

    (77) expression_logic -> logic_element logic_operator logic_element logic_operations .

    CLOSE_PAREN     reduce using rule 77 (expression_logic -> logic_element logic_operator logic_element logic_operations .)
    SEMICOLON       reduce using rule 77 (expression_logic -> logic_element logic_operator logic_element logic_operations .)
    COMMA           reduce using rule 77 (expression_logic -> logic_element logic_operator logic_element logic_operations .)
    CLOSE_BRACE     reduce using rule 77 (expression_logic -> logic_element logic_operator logic_element logic_operations .)


state 188

    (80) logic_operations -> logic_operation .
    (81) logic_operations -> logic_operation . logic_operations
    (80) logic_operations -> . logic_operation
    (81) logic_operations -> . logic_operation logic_operations
    (82) logic_operation -> . logic_operator logic_element
    (78) logic_operator -> . AND
    (79) logic_operator -> . OR

    CLOSE_PAREN     reduce using rule 80 (logic_operations -> logic_operation .)
    SEMICOLON       reduce using rule 80 (logic_operations -> logic_operation .)
    COMMA           reduce using rule 80 (logic_operations -> logic_operation .)
    CLOSE_BRACE     reduce using rule 80 (logic_operations -> logic_operation .)
    AND             shift and go to state 106
    OR              shift and go to state 107

    logic_operation                shift and go to state 188
    logic_operations               shift and go to state 211
    logic_operator                 shift and go to state 186

state 189

    (121) logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .

    AND             reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    OR              reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    SEMICOLON       reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    COMMA           reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)


state 190

    (115) comp_element -> OPEN_PAREN expression_arith . CLOSE_PAREN
    (104) element -> OPEN_PAREN expression_arith . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 148


state 191

    (105) element -> STRING properties .

    PLUS            reduce using rule 105 (element -> STRING properties .)
    MINUS           reduce using rule 105 (element -> STRING properties .)
    MULTIPLY        reduce using rule 105 (element -> STRING properties .)
    DIVISION        reduce using rule 105 (element -> STRING properties .)
    EQUAL           reduce using rule 105 (element -> STRING properties .)
    GRATER          reduce using rule 105 (element -> STRING properties .)
    GRATER_EQUAL    reduce using rule 105 (element -> STRING properties .)
    LOWER           reduce using rule 105 (element -> STRING properties .)
    LOWER_EQUAL     reduce using rule 105 (element -> STRING properties .)
    SEMICOLON       reduce using rule 105 (element -> STRING properties .)
    CLOSE_PAREN     reduce using rule 105 (element -> STRING properties .)
    AND             reduce using rule 105 (element -> STRING properties .)
    OR              reduce using rule 105 (element -> STRING properties .)
    COMMA           reduce using rule 105 (element -> STRING properties .)
    CLOSE_BRACE     reduce using rule 105 (element -> STRING properties .)


state 192

    (104) element -> OPEN_PAREN expression_arith . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 212


state 193

    (11) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList . CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    CLOSE_BRACE     shift and go to state 213
    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 194

    (13) args_list -> STRING COLON type .
    (14) args_list -> STRING COLON type . COMMA args_list

    CLOSE_PAREN     reduce using rule 13 (args_list -> STRING COLON type .)
    COMMA           shift and go to state 214


state 195

    (46) type -> CHARACTER .

    COMMA           reduce using rule 46 (type -> CHARACTER .)
    CLOSE_PAREN     reduce using rule 46 (type -> CHARACTER .)
    OPEN_BRACE      reduce using rule 46 (type -> CHARACTER .)
    CLOSE_BRACE     reduce using rule 46 (type -> CHARACTER .)


state 196

    (47) type -> INT_TYPE .

    COMMA           reduce using rule 47 (type -> INT_TYPE .)
    CLOSE_PAREN     reduce using rule 47 (type -> INT_TYPE .)
    OPEN_BRACE      reduce using rule 47 (type -> INT_TYPE .)
    CLOSE_BRACE     reduce using rule 47 (type -> INT_TYPE .)


state 197

    (48) type -> FLOAT_TYPE .

    COMMA           reduce using rule 48 (type -> FLOAT_TYPE .)
    CLOSE_PAREN     reduce using rule 48 (type -> FLOAT_TYPE .)
    OPEN_BRACE      reduce using rule 48 (type -> FLOAT_TYPE .)
    CLOSE_BRACE     reduce using rule 48 (type -> FLOAT_TYPE .)


state 198

    (49) type -> BOOLEAN .

    COMMA           reduce using rule 49 (type -> BOOLEAN .)
    CLOSE_PAREN     reduce using rule 49 (type -> BOOLEAN .)
    OPEN_BRACE      reduce using rule 49 (type -> BOOLEAN .)
    CLOSE_BRACE     reduce using rule 49 (type -> BOOLEAN .)


state 199

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON . type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (46) type -> . CHARACTER
    (47) type -> . INT_TYPE
    (48) type -> . FLOAT_TYPE
    (49) type -> . BOOLEAN

    CHARACTER       shift and go to state 195
    INT_TYPE        shift and go to state 196
    FLOAT_TYPE      shift and go to state 197
    BOOLEAN         shift and go to state 198

    type                           shift and go to state 215

state 200

    (24) declaration_identifier -> STRING COLON STRING .
    (25) declaration_identifier -> STRING COLON STRING . COMMA declaration_identifier

    SEMICOLON       reduce using rule 24 (declaration_identifier -> STRING COLON STRING .)
    COMMA           shift and go to state 216


state 201

    (22) declaration_identifier -> STRING .
    (23) declaration_identifier -> STRING . COMMA declaration_identifier
    (24) declaration_identifier -> STRING . COLON STRING
    (25) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier
    (30) object_identifiers -> STRING . COLON STRING
    (31) object_identifiers -> STRING . COLON STRING COMMA object_identifiers

    SEMICOLON       reduce using rule 22 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 217
    COLON           shift and go to state 70


state 202

    (25) declaration_identifier -> STRING COLON STRING COMMA declaration_identifier .

    SEMICOLON       reduce using rule 25 (declaration_identifier -> STRING COLON STRING COMMA declaration_identifier .)


state 203

    (38) type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .

    SEMICOLON       reduce using rule 38 (type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .)


state 204

    (40) type_pairs -> type_pair COMMA . type_pairs
    (42) type_pairs -> type_pair COMMA .
    (40) type_pairs -> . type_pair COMMA type_pairs
    (41) type_pairs -> . type_pair
    (42) type_pairs -> . type_pair COMMA
    (43) type_pair -> . key COLON type
    (44) key -> . QUOTED_STRING
    (45) key -> . STRING

    CLOSE_BRACE     reduce using rule 42 (type_pairs -> type_pair COMMA .)
    QUOTED_STRING   shift and go to state 145
    STRING          shift and go to state 146

    type_pair                      shift and go to state 178
    type_pairs                     shift and go to state 218
    key                            shift and go to state 179

state 205

    (43) type_pair -> key COLON . type
    (46) type -> . CHARACTER
    (47) type -> . INT_TYPE
    (48) type -> . FLOAT_TYPE
    (49) type -> . BOOLEAN

    CHARACTER       shift and go to state 195
    INT_TYPE        shift and go to state 196
    FLOAT_TYPE      shift and go to state 197
    BOOLEAN         shift and go to state 198

    type                           shift and go to state 219

state 206

    (68) value -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .
    (121) logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .

    SEMICOLON       reduce using rule 68 (value -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    COMMA           reduce using rule 68 (value -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 68 (value -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    AND             reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)
    OR              reduce using rule 121 (logic_element -> NOT OPEN_PAREN expression_comp CLOSE_PAREN .)


state 207

    (34) pairs -> pair COMMA pairs .

    CLOSE_BRACE     reduce using rule 34 (pairs -> pair COMMA pairs .)


state 208

    (37) pair -> key COLON value .

    COMMA           reduce using rule 37 (pair -> key COLON value .)
    CLOSE_BRACE     reduce using rule 37 (pair -> key COLON value .)


state 209

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .
    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE . ELSE OPEN_BRACE statementList CLOSE_BRACE

    COMMENT         reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    IF              reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    WHILE           reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    FUNCTION        reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    LET             reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    TYPE            reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    STRING          reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    $end            reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    RETURN          reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    ELSE            shift and go to state 220


state 210

    (82) logic_operation -> logic_operator logic_element .

    AND             reduce using rule 82 (logic_operation -> logic_operator logic_element .)
    OR              reduce using rule 82 (logic_operation -> logic_operator logic_element .)
    CLOSE_PAREN     reduce using rule 82 (logic_operation -> logic_operator logic_element .)
    SEMICOLON       reduce using rule 82 (logic_operation -> logic_operator logic_element .)
    COMMA           reduce using rule 82 (logic_operation -> logic_operator logic_element .)
    CLOSE_BRACE     reduce using rule 82 (logic_operation -> logic_operator logic_element .)


state 211

    (81) logic_operations -> logic_operation logic_operations .

    CLOSE_PAREN     reduce using rule 81 (logic_operations -> logic_operation logic_operations .)
    SEMICOLON       reduce using rule 81 (logic_operations -> logic_operation logic_operations .)
    COMMA           reduce using rule 81 (logic_operations -> logic_operation logic_operations .)
    CLOSE_BRACE     reduce using rule 81 (logic_operations -> logic_operation logic_operations .)


state 212

    (104) element -> OPEN_PAREN expression_arith CLOSE_PAREN .

    PLUS            reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    MINUS           reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    MULTIPLY        reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    DIVISION        reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    EQUAL           reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    GRATER          reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    GRATER_EQUAL    reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    LOWER           reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    LOWER_EQUAL     reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    SEMICOLON       reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    AND             reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    OR              reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    COMMA           reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 104 (element -> OPEN_PAREN expression_arith CLOSE_PAREN .)


state 213

    (11) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .

    COMMENT         reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    IF              reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    WHILE           reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    FUNCTION        reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    LET             reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    TYPE            reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    STRING          reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    $end            reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    RETURN          reduce using rule 11 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)


state 214

    (14) args_list -> STRING COLON type COMMA . args_list
    (13) args_list -> . STRING COLON type
    (14) args_list -> . STRING COLON type COMMA args_list

    STRING          shift and go to state 125

    args_list                      shift and go to state 221

state 215

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type . OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    OPEN_BRACE      shift and go to state 222


state 216

    (25) declaration_identifier -> STRING COLON STRING COMMA . declaration_identifier
    (22) declaration_identifier -> . STRING
    (23) declaration_identifier -> . STRING COMMA declaration_identifier
    (24) declaration_identifier -> . STRING COLON STRING
    (25) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier

    STRING          shift and go to state 223

    declaration_identifier         shift and go to state 202

state 217

    (23) declaration_identifier -> STRING COMMA . declaration_identifier
    (22) declaration_identifier -> . STRING
    (23) declaration_identifier -> . STRING COMMA declaration_identifier
    (24) declaration_identifier -> . STRING COLON STRING
    (25) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier

    STRING          shift and go to state 223

    declaration_identifier         shift and go to state 131

state 218

    (40) type_pairs -> type_pair COMMA type_pairs .

    CLOSE_BRACE     reduce using rule 40 (type_pairs -> type_pair COMMA type_pairs .)


state 219

    (43) type_pair -> key COLON type .

    COMMA           reduce using rule 43 (type_pair -> key COLON type .)
    CLOSE_BRACE     reduce using rule 43 (type_pair -> key COLON type .)


state 220

    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE . OPEN_BRACE statementList CLOSE_BRACE

    OPEN_BRACE      shift and go to state 224


state 221

    (14) args_list -> STRING COLON type COMMA args_list .

    CLOSE_PAREN     reduce using rule 14 (args_list -> STRING COLON type COMMA args_list .)


state 222

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE . statementList RETURN value SEMICOLON CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 225
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 223

    (22) declaration_identifier -> STRING .
    (23) declaration_identifier -> STRING . COMMA declaration_identifier
    (24) declaration_identifier -> STRING . COLON STRING
    (25) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier

    SEMICOLON       reduce using rule 22 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 217
    COLON           shift and go to state 174


state 224

    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE . statementList CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 226
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 225

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList . RETURN value SEMICOLON CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    RETURN          shift and go to state 227
    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 226

    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList . CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . COMMENT
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function_definition
    (15) instruction -> . declaration SEMICOLON
    (16) instruction -> . asignation SEMICOLON
    (17) instruction -> . property_asignation SEMICOLON
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (10) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (11) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (12) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (19) declaration -> . LET declaration_identifier
    (20) declaration -> . LET asignation
    (21) declaration -> . TYPE STRING ASSIGN type_object
    (28) asignation -> . identifiers ASSIGN value
    (29) asignation -> . object_identifiers ASSIGN object
    (18) property_asignation -> . STRING properties ASSIGN value
    (26) identifiers -> . STRING
    (27) identifiers -> . STRING COMMA identifiers
    (30) object_identifiers -> . STRING COLON STRING
    (31) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    CLOSE_BRACE     shift and go to state 228
    COMMENT         shift and go to state 5
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 6
    loop                           shift and go to state 7
    function_definition            shift and go to state 8
    declaration                    shift and go to state 9
    asignation                     shift and go to state 10
    property_asignation            shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 227

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN . value SEMICOLON CLOSE_BRACE
    (56) value -> . CHARACTER_VALUE
    (57) value -> . INTEGER
    (58) value -> . FLOAT
    (59) value -> . HEX
    (60) value -> . SCIENTIFIC
    (61) value -> . OCTAL
    (62) value -> . BINARY
    (63) value -> . NULL
    (64) value -> . TRUE
    (65) value -> . FALSE
    (66) value -> . expression_arith
    (67) value -> . expression_comp
    (68) value -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (69) value -> . expression_logic
    (70) value -> . NOT logic_element
    (71) value -> . object
    (72) value -> . STRING properties
    (73) value -> . STRING
    (89) expression_arith -> . element operations
    (83) expression_comp -> . comp_element comp_operator comp_element
    (76) expression_logic -> . logic_element logic_operator logic_element
    (77) expression_logic -> . logic_element logic_operator logic_element logic_operations
    (32) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (33) object -> . OPEN_BRACE CLOSE_BRACE
    (97) element -> . INTEGER
    (98) element -> . FLOAT
    (99) element -> . HEX
    (100) element -> . SCIENTIFIC
    (101) element -> . OCTAL
    (102) element -> . BINARY
    (103) element -> . STRING
    (104) element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (105) element -> . STRING properties
    (106) element -> . CHARACTER_VALUE
    (107) comp_element -> . INTEGER
    (108) comp_element -> . FLOAT
    (109) comp_element -> . HEX
    (110) comp_element -> . SCIENTIFIC
    (111) comp_element -> . OCTAL
    (112) comp_element -> . BINARY
    (113) comp_element -> . STRING
    (114) comp_element -> . expression_arith
    (115) comp_element -> . OPEN_PAREN expression_arith CLOSE_PAREN
    (116) comp_element -> . STRING properties
    (117) comp_element -> . CHARACTER_VALUE
    (118) logic_element -> . TRUE
    (119) logic_element -> . FALSE
    (120) logic_element -> . expression_comp
    (121) logic_element -> . NOT OPEN_PAREN expression_comp CLOSE_PAREN
    (122) logic_element -> . OPEN_PAREN expression_logic CLOSE_PAREN
    (123) logic_element -> . STRING
    (124) logic_element -> . NOT logic_element

    CHARACTER_VALUE shift and go to state 73
    INTEGER         shift and go to state 74
    FLOAT           shift and go to state 75
    HEX             shift and go to state 76
    SCIENTIFIC      shift and go to state 77
    OCTAL           shift and go to state 78
    BINARY          shift and go to state 79
    NULL            shift and go to state 80
    TRUE            shift and go to state 81
    FALSE           shift and go to state 82
    NOT             shift and go to state 85
    STRING          shift and go to state 90
    OPEN_BRACE      shift and go to state 91
    OPEN_PAREN      shift and go to state 86

    value                          shift and go to state 229
    expression_arith               shift and go to state 83
    expression_comp                shift and go to state 84
    expression_logic               shift and go to state 87
    logic_element                  shift and go to state 88
    object                         shift and go to state 89
    element                        shift and go to state 58
    comp_element                   shift and go to state 49

state 228

    (10) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .

    COMMENT         reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    IF              reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    WHILE           reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    FUNCTION        reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    LET             reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    TYPE            reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    STRING          reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    $end            reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    RETURN          reduce using rule 10 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)


state 229

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value . SEMICOLON CLOSE_BRACE

    SEMICOLON       shift and go to state 230


state 230

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 231


state 231

    (12) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .

    COMMENT         reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    IF              reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    WHILE           reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    FUNCTION        reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    LET             reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    TYPE            reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    STRING          reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    $end            reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    RETURN          reduce using rule 12 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)

