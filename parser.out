Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statementList
Rule 2     statementList -> statement
Rule 3     statementList -> statementList statement
Rule 4     statement -> instruction
Rule 5     statement -> conditional
Rule 6     statement -> loop
Rule 7     statement -> function_definition
Rule 8     conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
Rule 9     conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
Rule 10    loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
Rule 11    function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
Rule 12    function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN
Rule 13    args_call -> expression
Rule 14    args_call -> expression COMMA args_call
Rule 15    args_call -> <empty>
Rule 16    args_list -> STRING COLON type
Rule 17    args_list -> STRING COLON type COMMA args_list
Rule 18    args_list -> <empty>
Rule 19    instruction -> declaration SEMICOLON
Rule 20    instruction -> asignation SEMICOLON
Rule 21    instruction -> property_asignation SEMICOLON
Rule 22    instruction -> function_call SEMICOLON
Rule 23    property_asignation -> STRING properties ASSIGN value
Rule 24    declaration -> LET declaration_identifier
Rule 25    declaration -> LET asignation
Rule 26    declaration -> TYPE STRING ASSIGN type_object
Rule 27    declaration_identifier -> STRING
Rule 28    declaration_identifier -> STRING COMMA declaration_identifier
Rule 29    declaration_identifier -> STRING COLON STRING
Rule 30    declaration_identifier -> STRING COLON STRING COMMA declaration_identifier
Rule 31    identifiers -> STRING
Rule 32    identifiers -> STRING COMMA identifiers
Rule 33    asignation -> identifiers ASSIGN value
Rule 34    asignation -> object_identifiers ASSIGN object
Rule 35    object_identifiers -> STRING COLON STRING
Rule 36    object_identifiers -> STRING COLON STRING COMMA object_identifiers
Rule 37    object -> OPEN_BRACE pairs CLOSE_BRACE
Rule 38    object -> OPEN_BRACE CLOSE_BRACE
Rule 39    pairs -> pair
Rule 40    pairs -> pair COMMA
Rule 41    pairs -> pair COMMA pairs
Rule 42    pair -> key COLON value
Rule 43    type_object -> OPEN_BRACE type_pairs CLOSE_BRACE
Rule 44    type_object -> OPEN_BRACE CLOSE_BRACE
Rule 45    type_pairs -> type_pair COMMA type_pairs
Rule 46    type_pairs -> type_pair
Rule 47    type_pairs -> type_pair COMMA
Rule 48    type_pair -> key COLON type
Rule 49    key -> QUOTED_STRING
Rule 50    key -> STRING
Rule 51    type -> CHARACTER
Rule 52    type -> INT_TYPE
Rule 53    type -> FLOAT_TYPE
Rule 54    type -> BOOLEAN
Rule 55    type -> type_object
Rule 56    type -> STRING
Rule 57    value -> NULL
Rule 58    value -> expression
Rule 59    value -> object
Rule 60    expression -> expression PLUS expression
Rule 61    expression -> expression MINUS expression
Rule 62    expression -> expression MULTIPLY expression
Rule 63    expression -> expression DIVISION expression
Rule 64    expression -> expression GRATER expression
Rule 65    expression -> expression LOWER expression
Rule 66    expression -> expression GRATER_EQUAL expression
Rule 67    expression -> expression LOWER_EQUAL expression
Rule 68    expression -> expression EQUAL expression
Rule 69    expression -> expression AND expression
Rule 70    expression -> expression OR expression
Rule 71    expression -> NOT expression
Rule 72    expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 73    expression -> INTEGER
Rule 74    expression -> FLOAT
Rule 75    expression -> HEX
Rule 76    expression -> SCIENTIFIC
Rule 77    expression -> OCTAL
Rule 78    expression -> BINARY
Rule 79    expression -> CHARACTER_VALUE
Rule 80    expression -> TRUE
Rule 81    expression -> FALSE
Rule 82    expression -> STRING
Rule 83    expression -> object_property
Rule 84    expression -> function_call
Rule 85    object_property -> STRING properties
Rule 86    properties -> dot_property
Rule 87    properties -> square_property
Rule 88    properties -> dot_property properties
Rule 89    properties -> square_property properties
Rule 90    dot_property -> DOT STRING
Rule 91    square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

Terminals, with rules where they appear

AND                  : 69
ASSIGN               : 23 26 33 34
BINARY               : 78
BOOLEAN              : 54
CHARACTER            : 51
CHARACTER_VALUE      : 79
CLOSE_BRACE          : 8 9 9 10 11 37 38 43 44
CLOSE_PAREN          : 8 9 10 11 12 72
CLOSE_SQUARE         : 91
COLON                : 11 16 17 29 30 35 36 42 48
COMMA                : 14 17 28 30 32 36 40 41 45 47
COMMENT              : 
DIVISION             : 63
DOT                  : 90
ELSE                 : 9
EQUAL                : 68
FALSE                : 81
FLOAT                : 74
FLOAT_TYPE           : 53
FUNCTION             : 11
GRATER               : 64
GRATER_EQUAL         : 66
HEX                  : 75
IF                   : 8 9
INTEGER              : 73
INT_TYPE             : 52
LET                  : 24 25
LOWER                : 65
LOWER_EQUAL          : 67
MINUS                : 61
MULTIPLY             : 62
NOT                  : 71
NULL                 : 57
OCTAL                : 77
OPEN_BRACE           : 8 9 9 10 11 37 38 43 44
OPEN_PAREN           : 8 9 10 11 12 72
OPEN_SQUARE          : 91
OR                   : 70
PLUS                 : 60
QUOTED_STRING        : 49 91
RETURN               : 11
SCIENTIFIC           : 76
SEMICOLON            : 11 19 20 21 22
STRING               : 11 12 16 17 23 26 27 28 29 29 30 30 31 32 35 35 36 36 50 56 82 85 90
TRUE                 : 80
TYPE                 : 26
WHILE                : 10
error                : 

Nonterminals, with rules where they appear

args_call            : 12 14
args_list            : 11 17
asignation           : 20 25
conditional          : 5
declaration          : 19
declaration_identifier : 24 28 30
dot_property         : 86 88
expression           : 8 9 10 13 14 58 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 72
function_call        : 22 84
function_definition  : 7
identifiers          : 32 33
instruction          : 4
key                  : 42 48
loop                 : 6
object               : 34 59
object_identifiers   : 34 36
object_property      : 83
pair                 : 39 40 41
pairs                : 37 41
program              : 0
properties           : 23 85 88 89
property_asignation  : 21
square_property      : 87 89
statement            : 2 3
statementList        : 1 3 8 9 9 10 11
type                 : 11 16 17 48
type_object          : 26 55
type_pair            : 45 46 47
type_pairs           : 43 45
value                : 11 23 33 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statementList
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    program                        shift and go to state 1
    statementList                  shift and go to state 2
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statementList .
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    $end            reduce using rule 1 (program -> statementList .)
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 3

    (2) statementList -> statement .

    IF              reduce using rule 2 (statementList -> statement .)
    WHILE           reduce using rule 2 (statementList -> statement .)
    FUNCTION        reduce using rule 2 (statementList -> statement .)
    LET             reduce using rule 2 (statementList -> statement .)
    TYPE            reduce using rule 2 (statementList -> statement .)
    STRING          reduce using rule 2 (statementList -> statement .)
    $end            reduce using rule 2 (statementList -> statement .)
    CLOSE_BRACE     reduce using rule 2 (statementList -> statement .)
    RETURN          reduce using rule 2 (statementList -> statement .)


state 4

    (4) statement -> instruction .

    IF              reduce using rule 4 (statement -> instruction .)
    WHILE           reduce using rule 4 (statement -> instruction .)
    FUNCTION        reduce using rule 4 (statement -> instruction .)
    LET             reduce using rule 4 (statement -> instruction .)
    TYPE            reduce using rule 4 (statement -> instruction .)
    STRING          reduce using rule 4 (statement -> instruction .)
    $end            reduce using rule 4 (statement -> instruction .)
    CLOSE_BRACE     reduce using rule 4 (statement -> instruction .)
    RETURN          reduce using rule 4 (statement -> instruction .)


state 5

    (5) statement -> conditional .

    IF              reduce using rule 5 (statement -> conditional .)
    WHILE           reduce using rule 5 (statement -> conditional .)
    FUNCTION        reduce using rule 5 (statement -> conditional .)
    LET             reduce using rule 5 (statement -> conditional .)
    TYPE            reduce using rule 5 (statement -> conditional .)
    STRING          reduce using rule 5 (statement -> conditional .)
    $end            reduce using rule 5 (statement -> conditional .)
    CLOSE_BRACE     reduce using rule 5 (statement -> conditional .)
    RETURN          reduce using rule 5 (statement -> conditional .)


state 6

    (6) statement -> loop .

    IF              reduce using rule 6 (statement -> loop .)
    WHILE           reduce using rule 6 (statement -> loop .)
    FUNCTION        reduce using rule 6 (statement -> loop .)
    LET             reduce using rule 6 (statement -> loop .)
    TYPE            reduce using rule 6 (statement -> loop .)
    STRING          reduce using rule 6 (statement -> loop .)
    $end            reduce using rule 6 (statement -> loop .)
    CLOSE_BRACE     reduce using rule 6 (statement -> loop .)
    RETURN          reduce using rule 6 (statement -> loop .)


state 7

    (7) statement -> function_definition .

    IF              reduce using rule 7 (statement -> function_definition .)
    WHILE           reduce using rule 7 (statement -> function_definition .)
    FUNCTION        reduce using rule 7 (statement -> function_definition .)
    LET             reduce using rule 7 (statement -> function_definition .)
    TYPE            reduce using rule 7 (statement -> function_definition .)
    STRING          reduce using rule 7 (statement -> function_definition .)
    $end            reduce using rule 7 (statement -> function_definition .)
    CLOSE_BRACE     reduce using rule 7 (statement -> function_definition .)
    RETURN          reduce using rule 7 (statement -> function_definition .)


state 8

    (19) instruction -> declaration . SEMICOLON

    SEMICOLON       shift and go to state 21


state 9

    (20) instruction -> asignation . SEMICOLON

    SEMICOLON       shift and go to state 22


state 10

    (21) instruction -> property_asignation . SEMICOLON

    SEMICOLON       shift and go to state 23


state 11

    (22) instruction -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 24


state 12

    (8) conditional -> IF . OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> IF . OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE

    OPEN_PAREN      shift and go to state 25


state 13

    (10) loop -> WHILE . OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE

    OPEN_PAREN      shift and go to state 26


state 14

    (11) function_definition -> FUNCTION . STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    STRING          shift and go to state 27


state 15

    (23) property_asignation -> STRING . properties ASSIGN value
    (12) function_call -> STRING . OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> STRING .
    (32) identifiers -> STRING . COMMA identifiers
    (35) object_identifiers -> STRING . COLON STRING
    (36) object_identifiers -> STRING . COLON STRING COMMA object_identifiers
    (86) properties -> . dot_property
    (87) properties -> . square_property
    (88) properties -> . dot_property properties
    (89) properties -> . square_property properties
    (90) dot_property -> . DOT STRING
    (91) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    OPEN_PAREN      shift and go to state 29
    ASSIGN          reduce using rule 31 (identifiers -> STRING .)
    COMMA           shift and go to state 30
    COLON           shift and go to state 31
    DOT             shift and go to state 34
    OPEN_SQUARE     shift and go to state 35

    properties                     shift and go to state 28
    dot_property                   shift and go to state 32
    square_property                shift and go to state 33

state 16

    (24) declaration -> LET . declaration_identifier
    (25) declaration -> LET . asignation
    (27) declaration_identifier -> . STRING
    (28) declaration_identifier -> . STRING COMMA declaration_identifier
    (29) declaration_identifier -> . STRING COLON STRING
    (30) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    STRING          shift and go to state 38

    declaration_identifier         shift and go to state 36
    asignation                     shift and go to state 37
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 17

    (26) declaration -> TYPE . STRING ASSIGN type_object

    STRING          shift and go to state 39


state 18

    (33) asignation -> identifiers . ASSIGN value

    ASSIGN          shift and go to state 40


state 19

    (34) asignation -> object_identifiers . ASSIGN object

    ASSIGN          shift and go to state 41


state 20

    (3) statementList -> statementList statement .

    IF              reduce using rule 3 (statementList -> statementList statement .)
    WHILE           reduce using rule 3 (statementList -> statementList statement .)
    FUNCTION        reduce using rule 3 (statementList -> statementList statement .)
    LET             reduce using rule 3 (statementList -> statementList statement .)
    TYPE            reduce using rule 3 (statementList -> statementList statement .)
    STRING          reduce using rule 3 (statementList -> statementList statement .)
    $end            reduce using rule 3 (statementList -> statementList statement .)
    CLOSE_BRACE     reduce using rule 3 (statementList -> statementList statement .)
    RETURN          reduce using rule 3 (statementList -> statementList statement .)


state 21

    (19) instruction -> declaration SEMICOLON .

    IF              reduce using rule 19 (instruction -> declaration SEMICOLON .)
    WHILE           reduce using rule 19 (instruction -> declaration SEMICOLON .)
    FUNCTION        reduce using rule 19 (instruction -> declaration SEMICOLON .)
    LET             reduce using rule 19 (instruction -> declaration SEMICOLON .)
    TYPE            reduce using rule 19 (instruction -> declaration SEMICOLON .)
    STRING          reduce using rule 19 (instruction -> declaration SEMICOLON .)
    $end            reduce using rule 19 (instruction -> declaration SEMICOLON .)
    CLOSE_BRACE     reduce using rule 19 (instruction -> declaration SEMICOLON .)
    RETURN          reduce using rule 19 (instruction -> declaration SEMICOLON .)


state 22

    (20) instruction -> asignation SEMICOLON .

    IF              reduce using rule 20 (instruction -> asignation SEMICOLON .)
    WHILE           reduce using rule 20 (instruction -> asignation SEMICOLON .)
    FUNCTION        reduce using rule 20 (instruction -> asignation SEMICOLON .)
    LET             reduce using rule 20 (instruction -> asignation SEMICOLON .)
    TYPE            reduce using rule 20 (instruction -> asignation SEMICOLON .)
    STRING          reduce using rule 20 (instruction -> asignation SEMICOLON .)
    $end            reduce using rule 20 (instruction -> asignation SEMICOLON .)
    CLOSE_BRACE     reduce using rule 20 (instruction -> asignation SEMICOLON .)
    RETURN          reduce using rule 20 (instruction -> asignation SEMICOLON .)


state 23

    (21) instruction -> property_asignation SEMICOLON .

    IF              reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    WHILE           reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    FUNCTION        reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    LET             reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    TYPE            reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    STRING          reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    $end            reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    CLOSE_BRACE     reduce using rule 21 (instruction -> property_asignation SEMICOLON .)
    RETURN          reduce using rule 21 (instruction -> property_asignation SEMICOLON .)


state 24

    (22) instruction -> function_call SEMICOLON .

    IF              reduce using rule 22 (instruction -> function_call SEMICOLON .)
    WHILE           reduce using rule 22 (instruction -> function_call SEMICOLON .)
    FUNCTION        reduce using rule 22 (instruction -> function_call SEMICOLON .)
    LET             reduce using rule 22 (instruction -> function_call SEMICOLON .)
    TYPE            reduce using rule 22 (instruction -> function_call SEMICOLON .)
    STRING          reduce using rule 22 (instruction -> function_call SEMICOLON .)
    $end            reduce using rule 22 (instruction -> function_call SEMICOLON .)
    CLOSE_BRACE     reduce using rule 22 (instruction -> function_call SEMICOLON .)
    RETURN          reduce using rule 22 (instruction -> function_call SEMICOLON .)


state 25

    (8) conditional -> IF OPEN_PAREN . expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> IF OPEN_PAREN . expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 43
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 26

    (10) loop -> WHILE OPEN_PAREN . expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 57
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 27

    (11) function_definition -> FUNCTION STRING . OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    OPEN_PAREN      shift and go to state 58


state 28

    (23) property_asignation -> STRING properties . ASSIGN value

    ASSIGN          shift and go to state 59


state 29

    (12) function_call -> STRING OPEN_PAREN . args_call CLOSE_PAREN
    (13) args_call -> . expression
    (14) args_call -> . expression COMMA args_call
    (15) args_call -> .
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 15 (args_call -> .)
    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    args_call                      shift and go to state 60
    expression                     shift and go to state 61
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 30

    (32) identifiers -> STRING COMMA . identifiers
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers

    STRING          shift and go to state 62

    identifiers                    shift and go to state 63

state 31

    (35) object_identifiers -> STRING COLON . STRING
    (36) object_identifiers -> STRING COLON . STRING COMMA object_identifiers

    STRING          shift and go to state 64


state 32

    (86) properties -> dot_property .
    (88) properties -> dot_property . properties
    (86) properties -> . dot_property
    (87) properties -> . square_property
    (88) properties -> . dot_property properties
    (89) properties -> . square_property properties
    (90) dot_property -> . DOT STRING
    (91) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    ASSIGN          reduce using rule 86 (properties -> dot_property .)
    CLOSE_PAREN     reduce using rule 86 (properties -> dot_property .)
    PLUS            reduce using rule 86 (properties -> dot_property .)
    MINUS           reduce using rule 86 (properties -> dot_property .)
    MULTIPLY        reduce using rule 86 (properties -> dot_property .)
    DIVISION        reduce using rule 86 (properties -> dot_property .)
    GRATER          reduce using rule 86 (properties -> dot_property .)
    LOWER           reduce using rule 86 (properties -> dot_property .)
    GRATER_EQUAL    reduce using rule 86 (properties -> dot_property .)
    LOWER_EQUAL     reduce using rule 86 (properties -> dot_property .)
    EQUAL           reduce using rule 86 (properties -> dot_property .)
    AND             reduce using rule 86 (properties -> dot_property .)
    OR              reduce using rule 86 (properties -> dot_property .)
    COMMA           reduce using rule 86 (properties -> dot_property .)
    SEMICOLON       reduce using rule 86 (properties -> dot_property .)
    CLOSE_BRACE     reduce using rule 86 (properties -> dot_property .)
    DOT             shift and go to state 34
    OPEN_SQUARE     shift and go to state 35

    dot_property                   shift and go to state 32
    properties                     shift and go to state 65
    square_property                shift and go to state 33

state 33

    (87) properties -> square_property .
    (89) properties -> square_property . properties
    (86) properties -> . dot_property
    (87) properties -> . square_property
    (88) properties -> . dot_property properties
    (89) properties -> . square_property properties
    (90) dot_property -> . DOT STRING
    (91) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    ASSIGN          reduce using rule 87 (properties -> square_property .)
    CLOSE_PAREN     reduce using rule 87 (properties -> square_property .)
    PLUS            reduce using rule 87 (properties -> square_property .)
    MINUS           reduce using rule 87 (properties -> square_property .)
    MULTIPLY        reduce using rule 87 (properties -> square_property .)
    DIVISION        reduce using rule 87 (properties -> square_property .)
    GRATER          reduce using rule 87 (properties -> square_property .)
    LOWER           reduce using rule 87 (properties -> square_property .)
    GRATER_EQUAL    reduce using rule 87 (properties -> square_property .)
    LOWER_EQUAL     reduce using rule 87 (properties -> square_property .)
    EQUAL           reduce using rule 87 (properties -> square_property .)
    AND             reduce using rule 87 (properties -> square_property .)
    OR              reduce using rule 87 (properties -> square_property .)
    COMMA           reduce using rule 87 (properties -> square_property .)
    SEMICOLON       reduce using rule 87 (properties -> square_property .)
    CLOSE_BRACE     reduce using rule 87 (properties -> square_property .)
    DOT             shift and go to state 34
    OPEN_SQUARE     shift and go to state 35

    square_property                shift and go to state 33
    properties                     shift and go to state 66
    dot_property                   shift and go to state 32

state 34

    (90) dot_property -> DOT . STRING

    STRING          shift and go to state 67


state 35

    (91) square_property -> OPEN_SQUARE . QUOTED_STRING CLOSE_SQUARE

    QUOTED_STRING   shift and go to state 68


state 36

    (24) declaration -> LET declaration_identifier .

    SEMICOLON       reduce using rule 24 (declaration -> LET declaration_identifier .)


state 37

    (25) declaration -> LET asignation .

    SEMICOLON       reduce using rule 25 (declaration -> LET asignation .)


state 38

    (27) declaration_identifier -> STRING .
    (28) declaration_identifier -> STRING . COMMA declaration_identifier
    (29) declaration_identifier -> STRING . COLON STRING
    (30) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier
    (31) identifiers -> STRING .
    (32) identifiers -> STRING . COMMA identifiers
    (35) object_identifiers -> STRING . COLON STRING
    (36) object_identifiers -> STRING . COLON STRING COMMA object_identifiers

    SEMICOLON       reduce using rule 27 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 69
    COLON           shift and go to state 70
    ASSIGN          reduce using rule 31 (identifiers -> STRING .)


state 39

    (26) declaration -> TYPE STRING . ASSIGN type_object

    ASSIGN          shift and go to state 71


state 40

    (33) asignation -> identifiers ASSIGN . value
    (57) value -> . NULL
    (58) value -> . expression
    (59) value -> . object
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (37) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (38) object -> . OPEN_BRACE CLOSE_BRACE
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NULL            shift and go to state 73
    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54
    OPEN_BRACE      shift and go to state 76

    value                          shift and go to state 72
    expression                     shift and go to state 74
    object                         shift and go to state 75
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 41

    (34) asignation -> object_identifiers ASSIGN . object
    (37) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (38) object -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 76

    object                         shift and go to state 77

state 42

    (72) expression -> OPEN_PAREN . expression CLOSE_PAREN
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 78
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 43

    (8) conditional -> IF OPEN_PAREN expression . CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> IF OPEN_PAREN expression . CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88
    AND             shift and go to state 89
    OR              shift and go to state 90


state 44

    (71) expression -> NOT . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 91
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 45

    (73) expression -> INTEGER .

    CLOSE_PAREN     reduce using rule 73 (expression -> INTEGER .)
    PLUS            reduce using rule 73 (expression -> INTEGER .)
    MINUS           reduce using rule 73 (expression -> INTEGER .)
    MULTIPLY        reduce using rule 73 (expression -> INTEGER .)
    DIVISION        reduce using rule 73 (expression -> INTEGER .)
    GRATER          reduce using rule 73 (expression -> INTEGER .)
    LOWER           reduce using rule 73 (expression -> INTEGER .)
    GRATER_EQUAL    reduce using rule 73 (expression -> INTEGER .)
    LOWER_EQUAL     reduce using rule 73 (expression -> INTEGER .)
    EQUAL           reduce using rule 73 (expression -> INTEGER .)
    AND             reduce using rule 73 (expression -> INTEGER .)
    OR              reduce using rule 73 (expression -> INTEGER .)
    COMMA           reduce using rule 73 (expression -> INTEGER .)
    SEMICOLON       reduce using rule 73 (expression -> INTEGER .)
    CLOSE_BRACE     reduce using rule 73 (expression -> INTEGER .)


state 46

    (74) expression -> FLOAT .

    CLOSE_PAREN     reduce using rule 74 (expression -> FLOAT .)
    PLUS            reduce using rule 74 (expression -> FLOAT .)
    MINUS           reduce using rule 74 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 74 (expression -> FLOAT .)
    DIVISION        reduce using rule 74 (expression -> FLOAT .)
    GRATER          reduce using rule 74 (expression -> FLOAT .)
    LOWER           reduce using rule 74 (expression -> FLOAT .)
    GRATER_EQUAL    reduce using rule 74 (expression -> FLOAT .)
    LOWER_EQUAL     reduce using rule 74 (expression -> FLOAT .)
    EQUAL           reduce using rule 74 (expression -> FLOAT .)
    AND             reduce using rule 74 (expression -> FLOAT .)
    OR              reduce using rule 74 (expression -> FLOAT .)
    COMMA           reduce using rule 74 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 74 (expression -> FLOAT .)
    CLOSE_BRACE     reduce using rule 74 (expression -> FLOAT .)


state 47

    (75) expression -> HEX .

    CLOSE_PAREN     reduce using rule 75 (expression -> HEX .)
    PLUS            reduce using rule 75 (expression -> HEX .)
    MINUS           reduce using rule 75 (expression -> HEX .)
    MULTIPLY        reduce using rule 75 (expression -> HEX .)
    DIVISION        reduce using rule 75 (expression -> HEX .)
    GRATER          reduce using rule 75 (expression -> HEX .)
    LOWER           reduce using rule 75 (expression -> HEX .)
    GRATER_EQUAL    reduce using rule 75 (expression -> HEX .)
    LOWER_EQUAL     reduce using rule 75 (expression -> HEX .)
    EQUAL           reduce using rule 75 (expression -> HEX .)
    AND             reduce using rule 75 (expression -> HEX .)
    OR              reduce using rule 75 (expression -> HEX .)
    COMMA           reduce using rule 75 (expression -> HEX .)
    SEMICOLON       reduce using rule 75 (expression -> HEX .)
    CLOSE_BRACE     reduce using rule 75 (expression -> HEX .)


state 48

    (76) expression -> SCIENTIFIC .

    CLOSE_PAREN     reduce using rule 76 (expression -> SCIENTIFIC .)
    PLUS            reduce using rule 76 (expression -> SCIENTIFIC .)
    MINUS           reduce using rule 76 (expression -> SCIENTIFIC .)
    MULTIPLY        reduce using rule 76 (expression -> SCIENTIFIC .)
    DIVISION        reduce using rule 76 (expression -> SCIENTIFIC .)
    GRATER          reduce using rule 76 (expression -> SCIENTIFIC .)
    LOWER           reduce using rule 76 (expression -> SCIENTIFIC .)
    GRATER_EQUAL    reduce using rule 76 (expression -> SCIENTIFIC .)
    LOWER_EQUAL     reduce using rule 76 (expression -> SCIENTIFIC .)
    EQUAL           reduce using rule 76 (expression -> SCIENTIFIC .)
    AND             reduce using rule 76 (expression -> SCIENTIFIC .)
    OR              reduce using rule 76 (expression -> SCIENTIFIC .)
    COMMA           reduce using rule 76 (expression -> SCIENTIFIC .)
    SEMICOLON       reduce using rule 76 (expression -> SCIENTIFIC .)
    CLOSE_BRACE     reduce using rule 76 (expression -> SCIENTIFIC .)


state 49

    (77) expression -> OCTAL .

    CLOSE_PAREN     reduce using rule 77 (expression -> OCTAL .)
    PLUS            reduce using rule 77 (expression -> OCTAL .)
    MINUS           reduce using rule 77 (expression -> OCTAL .)
    MULTIPLY        reduce using rule 77 (expression -> OCTAL .)
    DIVISION        reduce using rule 77 (expression -> OCTAL .)
    GRATER          reduce using rule 77 (expression -> OCTAL .)
    LOWER           reduce using rule 77 (expression -> OCTAL .)
    GRATER_EQUAL    reduce using rule 77 (expression -> OCTAL .)
    LOWER_EQUAL     reduce using rule 77 (expression -> OCTAL .)
    EQUAL           reduce using rule 77 (expression -> OCTAL .)
    AND             reduce using rule 77 (expression -> OCTAL .)
    OR              reduce using rule 77 (expression -> OCTAL .)
    COMMA           reduce using rule 77 (expression -> OCTAL .)
    SEMICOLON       reduce using rule 77 (expression -> OCTAL .)
    CLOSE_BRACE     reduce using rule 77 (expression -> OCTAL .)


state 50

    (78) expression -> BINARY .

    CLOSE_PAREN     reduce using rule 78 (expression -> BINARY .)
    PLUS            reduce using rule 78 (expression -> BINARY .)
    MINUS           reduce using rule 78 (expression -> BINARY .)
    MULTIPLY        reduce using rule 78 (expression -> BINARY .)
    DIVISION        reduce using rule 78 (expression -> BINARY .)
    GRATER          reduce using rule 78 (expression -> BINARY .)
    LOWER           reduce using rule 78 (expression -> BINARY .)
    GRATER_EQUAL    reduce using rule 78 (expression -> BINARY .)
    LOWER_EQUAL     reduce using rule 78 (expression -> BINARY .)
    EQUAL           reduce using rule 78 (expression -> BINARY .)
    AND             reduce using rule 78 (expression -> BINARY .)
    OR              reduce using rule 78 (expression -> BINARY .)
    COMMA           reduce using rule 78 (expression -> BINARY .)
    SEMICOLON       reduce using rule 78 (expression -> BINARY .)
    CLOSE_BRACE     reduce using rule 78 (expression -> BINARY .)


state 51

    (79) expression -> CHARACTER_VALUE .

    CLOSE_PAREN     reduce using rule 79 (expression -> CHARACTER_VALUE .)
    PLUS            reduce using rule 79 (expression -> CHARACTER_VALUE .)
    MINUS           reduce using rule 79 (expression -> CHARACTER_VALUE .)
    MULTIPLY        reduce using rule 79 (expression -> CHARACTER_VALUE .)
    DIVISION        reduce using rule 79 (expression -> CHARACTER_VALUE .)
    GRATER          reduce using rule 79 (expression -> CHARACTER_VALUE .)
    LOWER           reduce using rule 79 (expression -> CHARACTER_VALUE .)
    GRATER_EQUAL    reduce using rule 79 (expression -> CHARACTER_VALUE .)
    LOWER_EQUAL     reduce using rule 79 (expression -> CHARACTER_VALUE .)
    EQUAL           reduce using rule 79 (expression -> CHARACTER_VALUE .)
    AND             reduce using rule 79 (expression -> CHARACTER_VALUE .)
    OR              reduce using rule 79 (expression -> CHARACTER_VALUE .)
    COMMA           reduce using rule 79 (expression -> CHARACTER_VALUE .)
    SEMICOLON       reduce using rule 79 (expression -> CHARACTER_VALUE .)
    CLOSE_BRACE     reduce using rule 79 (expression -> CHARACTER_VALUE .)


state 52

    (80) expression -> TRUE .

    CLOSE_PAREN     reduce using rule 80 (expression -> TRUE .)
    PLUS            reduce using rule 80 (expression -> TRUE .)
    MINUS           reduce using rule 80 (expression -> TRUE .)
    MULTIPLY        reduce using rule 80 (expression -> TRUE .)
    DIVISION        reduce using rule 80 (expression -> TRUE .)
    GRATER          reduce using rule 80 (expression -> TRUE .)
    LOWER           reduce using rule 80 (expression -> TRUE .)
    GRATER_EQUAL    reduce using rule 80 (expression -> TRUE .)
    LOWER_EQUAL     reduce using rule 80 (expression -> TRUE .)
    EQUAL           reduce using rule 80 (expression -> TRUE .)
    AND             reduce using rule 80 (expression -> TRUE .)
    OR              reduce using rule 80 (expression -> TRUE .)
    COMMA           reduce using rule 80 (expression -> TRUE .)
    SEMICOLON       reduce using rule 80 (expression -> TRUE .)
    CLOSE_BRACE     reduce using rule 80 (expression -> TRUE .)


state 53

    (81) expression -> FALSE .

    CLOSE_PAREN     reduce using rule 81 (expression -> FALSE .)
    PLUS            reduce using rule 81 (expression -> FALSE .)
    MINUS           reduce using rule 81 (expression -> FALSE .)
    MULTIPLY        reduce using rule 81 (expression -> FALSE .)
    DIVISION        reduce using rule 81 (expression -> FALSE .)
    GRATER          reduce using rule 81 (expression -> FALSE .)
    LOWER           reduce using rule 81 (expression -> FALSE .)
    GRATER_EQUAL    reduce using rule 81 (expression -> FALSE .)
    LOWER_EQUAL     reduce using rule 81 (expression -> FALSE .)
    EQUAL           reduce using rule 81 (expression -> FALSE .)
    AND             reduce using rule 81 (expression -> FALSE .)
    OR              reduce using rule 81 (expression -> FALSE .)
    COMMA           reduce using rule 81 (expression -> FALSE .)
    SEMICOLON       reduce using rule 81 (expression -> FALSE .)
    CLOSE_BRACE     reduce using rule 81 (expression -> FALSE .)


state 54

    (82) expression -> STRING .
    (85) object_property -> STRING . properties
    (12) function_call -> STRING . OPEN_PAREN args_call CLOSE_PAREN
    (86) properties -> . dot_property
    (87) properties -> . square_property
    (88) properties -> . dot_property properties
    (89) properties -> . square_property properties
    (90) dot_property -> . DOT STRING
    (91) square_property -> . OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE

    CLOSE_PAREN     reduce using rule 82 (expression -> STRING .)
    PLUS            reduce using rule 82 (expression -> STRING .)
    MINUS           reduce using rule 82 (expression -> STRING .)
    MULTIPLY        reduce using rule 82 (expression -> STRING .)
    DIVISION        reduce using rule 82 (expression -> STRING .)
    GRATER          reduce using rule 82 (expression -> STRING .)
    LOWER           reduce using rule 82 (expression -> STRING .)
    GRATER_EQUAL    reduce using rule 82 (expression -> STRING .)
    LOWER_EQUAL     reduce using rule 82 (expression -> STRING .)
    EQUAL           reduce using rule 82 (expression -> STRING .)
    AND             reduce using rule 82 (expression -> STRING .)
    OR              reduce using rule 82 (expression -> STRING .)
    COMMA           reduce using rule 82 (expression -> STRING .)
    SEMICOLON       reduce using rule 82 (expression -> STRING .)
    CLOSE_BRACE     reduce using rule 82 (expression -> STRING .)
    OPEN_PAREN      shift and go to state 29
    DOT             shift and go to state 34
    OPEN_SQUARE     shift and go to state 35

    properties                     shift and go to state 92
    dot_property                   shift and go to state 32
    square_property                shift and go to state 33

state 55

    (83) expression -> object_property .

    CLOSE_PAREN     reduce using rule 83 (expression -> object_property .)
    PLUS            reduce using rule 83 (expression -> object_property .)
    MINUS           reduce using rule 83 (expression -> object_property .)
    MULTIPLY        reduce using rule 83 (expression -> object_property .)
    DIVISION        reduce using rule 83 (expression -> object_property .)
    GRATER          reduce using rule 83 (expression -> object_property .)
    LOWER           reduce using rule 83 (expression -> object_property .)
    GRATER_EQUAL    reduce using rule 83 (expression -> object_property .)
    LOWER_EQUAL     reduce using rule 83 (expression -> object_property .)
    EQUAL           reduce using rule 83 (expression -> object_property .)
    AND             reduce using rule 83 (expression -> object_property .)
    OR              reduce using rule 83 (expression -> object_property .)
    COMMA           reduce using rule 83 (expression -> object_property .)
    SEMICOLON       reduce using rule 83 (expression -> object_property .)
    CLOSE_BRACE     reduce using rule 83 (expression -> object_property .)


state 56

    (84) expression -> function_call .

    CLOSE_PAREN     reduce using rule 84 (expression -> function_call .)
    PLUS            reduce using rule 84 (expression -> function_call .)
    MINUS           reduce using rule 84 (expression -> function_call .)
    MULTIPLY        reduce using rule 84 (expression -> function_call .)
    DIVISION        reduce using rule 84 (expression -> function_call .)
    GRATER          reduce using rule 84 (expression -> function_call .)
    LOWER           reduce using rule 84 (expression -> function_call .)
    GRATER_EQUAL    reduce using rule 84 (expression -> function_call .)
    LOWER_EQUAL     reduce using rule 84 (expression -> function_call .)
    EQUAL           reduce using rule 84 (expression -> function_call .)
    AND             reduce using rule 84 (expression -> function_call .)
    OR              reduce using rule 84 (expression -> function_call .)
    COMMA           reduce using rule 84 (expression -> function_call .)
    SEMICOLON       reduce using rule 84 (expression -> function_call .)
    CLOSE_BRACE     reduce using rule 84 (expression -> function_call .)


state 57

    (10) loop -> WHILE OPEN_PAREN expression . CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     shift and go to state 93
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88
    AND             shift and go to state 89
    OR              shift and go to state 90


state 58

    (11) function_definition -> FUNCTION STRING OPEN_PAREN . args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (16) args_list -> . STRING COLON type
    (17) args_list -> . STRING COLON type COMMA args_list
    (18) args_list -> .

    STRING          shift and go to state 94
    CLOSE_PAREN     reduce using rule 18 (args_list -> .)

    args_list                      shift and go to state 95

state 59

    (23) property_asignation -> STRING properties ASSIGN . value
    (57) value -> . NULL
    (58) value -> . expression
    (59) value -> . object
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (37) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (38) object -> . OPEN_BRACE CLOSE_BRACE
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NULL            shift and go to state 73
    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54
    OPEN_BRACE      shift and go to state 76

    value                          shift and go to state 96
    expression                     shift and go to state 74
    object                         shift and go to state 75
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 60

    (12) function_call -> STRING OPEN_PAREN args_call . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 97


state 61

    (13) args_call -> expression .
    (14) args_call -> expression . COMMA args_call
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 13 (args_call -> expression .)
    COMMA           shift and go to state 98
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88
    AND             shift and go to state 89
    OR              shift and go to state 90


state 62

    (31) identifiers -> STRING .
    (32) identifiers -> STRING . COMMA identifiers

    ASSIGN          reduce using rule 31 (identifiers -> STRING .)
    COMMA           shift and go to state 30


state 63

    (32) identifiers -> STRING COMMA identifiers .

    ASSIGN          reduce using rule 32 (identifiers -> STRING COMMA identifiers .)


state 64

    (35) object_identifiers -> STRING COLON STRING .
    (36) object_identifiers -> STRING COLON STRING . COMMA object_identifiers

    ASSIGN          reduce using rule 35 (object_identifiers -> STRING COLON STRING .)
    COMMA           shift and go to state 99


state 65

    (88) properties -> dot_property properties .

    ASSIGN          reduce using rule 88 (properties -> dot_property properties .)
    CLOSE_PAREN     reduce using rule 88 (properties -> dot_property properties .)
    PLUS            reduce using rule 88 (properties -> dot_property properties .)
    MINUS           reduce using rule 88 (properties -> dot_property properties .)
    MULTIPLY        reduce using rule 88 (properties -> dot_property properties .)
    DIVISION        reduce using rule 88 (properties -> dot_property properties .)
    GRATER          reduce using rule 88 (properties -> dot_property properties .)
    LOWER           reduce using rule 88 (properties -> dot_property properties .)
    GRATER_EQUAL    reduce using rule 88 (properties -> dot_property properties .)
    LOWER_EQUAL     reduce using rule 88 (properties -> dot_property properties .)
    EQUAL           reduce using rule 88 (properties -> dot_property properties .)
    AND             reduce using rule 88 (properties -> dot_property properties .)
    OR              reduce using rule 88 (properties -> dot_property properties .)
    COMMA           reduce using rule 88 (properties -> dot_property properties .)
    SEMICOLON       reduce using rule 88 (properties -> dot_property properties .)
    CLOSE_BRACE     reduce using rule 88 (properties -> dot_property properties .)


state 66

    (89) properties -> square_property properties .

    ASSIGN          reduce using rule 89 (properties -> square_property properties .)
    CLOSE_PAREN     reduce using rule 89 (properties -> square_property properties .)
    PLUS            reduce using rule 89 (properties -> square_property properties .)
    MINUS           reduce using rule 89 (properties -> square_property properties .)
    MULTIPLY        reduce using rule 89 (properties -> square_property properties .)
    DIVISION        reduce using rule 89 (properties -> square_property properties .)
    GRATER          reduce using rule 89 (properties -> square_property properties .)
    LOWER           reduce using rule 89 (properties -> square_property properties .)
    GRATER_EQUAL    reduce using rule 89 (properties -> square_property properties .)
    LOWER_EQUAL     reduce using rule 89 (properties -> square_property properties .)
    EQUAL           reduce using rule 89 (properties -> square_property properties .)
    AND             reduce using rule 89 (properties -> square_property properties .)
    OR              reduce using rule 89 (properties -> square_property properties .)
    COMMA           reduce using rule 89 (properties -> square_property properties .)
    SEMICOLON       reduce using rule 89 (properties -> square_property properties .)
    CLOSE_BRACE     reduce using rule 89 (properties -> square_property properties .)


state 67

    (90) dot_property -> DOT STRING .

    DOT             reduce using rule 90 (dot_property -> DOT STRING .)
    OPEN_SQUARE     reduce using rule 90 (dot_property -> DOT STRING .)
    ASSIGN          reduce using rule 90 (dot_property -> DOT STRING .)
    CLOSE_PAREN     reduce using rule 90 (dot_property -> DOT STRING .)
    PLUS            reduce using rule 90 (dot_property -> DOT STRING .)
    MINUS           reduce using rule 90 (dot_property -> DOT STRING .)
    MULTIPLY        reduce using rule 90 (dot_property -> DOT STRING .)
    DIVISION        reduce using rule 90 (dot_property -> DOT STRING .)
    GRATER          reduce using rule 90 (dot_property -> DOT STRING .)
    LOWER           reduce using rule 90 (dot_property -> DOT STRING .)
    GRATER_EQUAL    reduce using rule 90 (dot_property -> DOT STRING .)
    LOWER_EQUAL     reduce using rule 90 (dot_property -> DOT STRING .)
    EQUAL           reduce using rule 90 (dot_property -> DOT STRING .)
    AND             reduce using rule 90 (dot_property -> DOT STRING .)
    OR              reduce using rule 90 (dot_property -> DOT STRING .)
    COMMA           reduce using rule 90 (dot_property -> DOT STRING .)
    SEMICOLON       reduce using rule 90 (dot_property -> DOT STRING .)
    CLOSE_BRACE     reduce using rule 90 (dot_property -> DOT STRING .)


state 68

    (91) square_property -> OPEN_SQUARE QUOTED_STRING . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 100


state 69

    (28) declaration_identifier -> STRING COMMA . declaration_identifier
    (32) identifiers -> STRING COMMA . identifiers
    (27) declaration_identifier -> . STRING
    (28) declaration_identifier -> . STRING COMMA declaration_identifier
    (29) declaration_identifier -> . STRING COLON STRING
    (30) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers

    STRING          shift and go to state 101

    declaration_identifier         shift and go to state 102
    identifiers                    shift and go to state 63

state 70

    (29) declaration_identifier -> STRING COLON . STRING
    (30) declaration_identifier -> STRING COLON . STRING COMMA declaration_identifier
    (35) object_identifiers -> STRING COLON . STRING
    (36) object_identifiers -> STRING COLON . STRING COMMA object_identifiers

    STRING          shift and go to state 103


state 71

    (26) declaration -> TYPE STRING ASSIGN . type_object
    (43) type_object -> . OPEN_BRACE type_pairs CLOSE_BRACE
    (44) type_object -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 105

    type_object                    shift and go to state 104

state 72

    (33) asignation -> identifiers ASSIGN value .

    SEMICOLON       reduce using rule 33 (asignation -> identifiers ASSIGN value .)


state 73

    (57) value -> NULL .

    SEMICOLON       reduce using rule 57 (value -> NULL .)
    COMMA           reduce using rule 57 (value -> NULL .)
    CLOSE_BRACE     reduce using rule 57 (value -> NULL .)


state 74

    (58) value -> expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    SEMICOLON       reduce using rule 58 (value -> expression .)
    COMMA           reduce using rule 58 (value -> expression .)
    CLOSE_BRACE     reduce using rule 58 (value -> expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88
    AND             shift and go to state 89
    OR              shift and go to state 90


state 75

    (59) value -> object .

    SEMICOLON       reduce using rule 59 (value -> object .)
    COMMA           reduce using rule 59 (value -> object .)
    CLOSE_BRACE     reduce using rule 59 (value -> object .)


state 76

    (37) object -> OPEN_BRACE . pairs CLOSE_BRACE
    (38) object -> OPEN_BRACE . CLOSE_BRACE
    (39) pairs -> . pair
    (40) pairs -> . pair COMMA
    (41) pairs -> . pair COMMA pairs
    (42) pair -> . key COLON value
    (49) key -> . QUOTED_STRING
    (50) key -> . STRING

    CLOSE_BRACE     shift and go to state 107
    QUOTED_STRING   shift and go to state 110
    STRING          shift and go to state 111

    pairs                          shift and go to state 106
    pair                           shift and go to state 108
    key                            shift and go to state 109

state 77

    (34) asignation -> object_identifiers ASSIGN object .

    SEMICOLON       reduce using rule 34 (asignation -> object_identifiers ASSIGN object .)


state 78

    (72) expression -> OPEN_PAREN expression . CLOSE_PAREN
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     shift and go to state 112
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88
    AND             shift and go to state 89
    OR              shift and go to state 90


state 79

    (8) conditional -> IF OPEN_PAREN expression CLOSE_PAREN . OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN . OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE

    OPEN_BRACE      shift and go to state 113


state 80

    (60) expression -> expression PLUS . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 114
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 81

    (61) expression -> expression MINUS . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 115
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 82

    (62) expression -> expression MULTIPLY . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 116
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 83

    (63) expression -> expression DIVISION . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 117
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 84

    (64) expression -> expression GRATER . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 118
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 85

    (65) expression -> expression LOWER . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 119
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 86

    (66) expression -> expression GRATER_EQUAL . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 120
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 87

    (67) expression -> expression LOWER_EQUAL . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 121
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 88

    (68) expression -> expression EQUAL . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 122
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 89

    (69) expression -> expression AND . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 123
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 90

    (70) expression -> expression OR . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 124
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 91

    (71) expression -> NOT expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 71 (expression -> NOT expression .)
    COMMA           reduce using rule 71 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 71 (expression -> NOT expression .)
    CLOSE_BRACE     reduce using rule 71 (expression -> NOT expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88
    AND             shift and go to state 89
    OR              shift and go to state 90

  ! PLUS            [ reduce using rule 71 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression -> NOT expression .) ]
  ! DIVISION        [ reduce using rule 71 (expression -> NOT expression .) ]
  ! GRATER          [ reduce using rule 71 (expression -> NOT expression .) ]
  ! LOWER           [ reduce using rule 71 (expression -> NOT expression .) ]
  ! GRATER_EQUAL    [ reduce using rule 71 (expression -> NOT expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 71 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 71 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 71 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 71 (expression -> NOT expression .) ]


state 92

    (85) object_property -> STRING properties .

    CLOSE_PAREN     reduce using rule 85 (object_property -> STRING properties .)
    PLUS            reduce using rule 85 (object_property -> STRING properties .)
    MINUS           reduce using rule 85 (object_property -> STRING properties .)
    MULTIPLY        reduce using rule 85 (object_property -> STRING properties .)
    DIVISION        reduce using rule 85 (object_property -> STRING properties .)
    GRATER          reduce using rule 85 (object_property -> STRING properties .)
    LOWER           reduce using rule 85 (object_property -> STRING properties .)
    GRATER_EQUAL    reduce using rule 85 (object_property -> STRING properties .)
    LOWER_EQUAL     reduce using rule 85 (object_property -> STRING properties .)
    EQUAL           reduce using rule 85 (object_property -> STRING properties .)
    AND             reduce using rule 85 (object_property -> STRING properties .)
    OR              reduce using rule 85 (object_property -> STRING properties .)
    COMMA           reduce using rule 85 (object_property -> STRING properties .)
    SEMICOLON       reduce using rule 85 (object_property -> STRING properties .)
    CLOSE_BRACE     reduce using rule 85 (object_property -> STRING properties .)


state 93

    (10) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN . OPEN_BRACE statementList CLOSE_BRACE

    OPEN_BRACE      shift and go to state 125


state 94

    (16) args_list -> STRING . COLON type
    (17) args_list -> STRING . COLON type COMMA args_list

    COLON           shift and go to state 126


state 95

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list . CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 127


state 96

    (23) property_asignation -> STRING properties ASSIGN value .

    SEMICOLON       reduce using rule 23 (property_asignation -> STRING properties ASSIGN value .)


state 97

    (12) function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .

    SEMICOLON       reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    PLUS            reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    MINUS           reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    MULTIPLY        reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    DIVISION        reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    GRATER          reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    LOWER           reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    GRATER_EQUAL    reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    LOWER_EQUAL     reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    EQUAL           reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    AND             reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    OR              reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    COMMA           reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 12 (function_call -> STRING OPEN_PAREN args_call CLOSE_PAREN .)


state 98

    (14) args_call -> expression COMMA . args_call
    (13) args_call -> . expression
    (14) args_call -> . expression COMMA args_call
    (15) args_call -> .
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 15 (args_call -> .)
    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54

    expression                     shift and go to state 61
    args_call                      shift and go to state 128
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 99

    (36) object_identifiers -> STRING COLON STRING COMMA . object_identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    STRING          shift and go to state 129

    object_identifiers             shift and go to state 130

state 100

    (91) square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .

    DOT             reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    ASSIGN          reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    PLUS            reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    MINUS           reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    DIVISION        reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    GRATER          reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    LOWER           reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    GRATER_EQUAL    reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    LOWER_EQUAL     reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    EQUAL           reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    AND             reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    OR              reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    COMMA           reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    SEMICOLON       reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 91 (square_property -> OPEN_SQUARE QUOTED_STRING CLOSE_SQUARE .)


state 101

    (27) declaration_identifier -> STRING .
    (28) declaration_identifier -> STRING . COMMA declaration_identifier
    (29) declaration_identifier -> STRING . COLON STRING
    (30) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier
    (31) identifiers -> STRING .
    (32) identifiers -> STRING . COMMA identifiers

    SEMICOLON       reduce using rule 27 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 69
    COLON           shift and go to state 131
    ASSIGN          reduce using rule 31 (identifiers -> STRING .)


state 102

    (28) declaration_identifier -> STRING COMMA declaration_identifier .

    SEMICOLON       reduce using rule 28 (declaration_identifier -> STRING COMMA declaration_identifier .)


state 103

    (29) declaration_identifier -> STRING COLON STRING .
    (30) declaration_identifier -> STRING COLON STRING . COMMA declaration_identifier
    (35) object_identifiers -> STRING COLON STRING .
    (36) object_identifiers -> STRING COLON STRING . COMMA object_identifiers

    SEMICOLON       reduce using rule 29 (declaration_identifier -> STRING COLON STRING .)
    COMMA           shift and go to state 132
    ASSIGN          reduce using rule 35 (object_identifiers -> STRING COLON STRING .)


state 104

    (26) declaration -> TYPE STRING ASSIGN type_object .

    SEMICOLON       reduce using rule 26 (declaration -> TYPE STRING ASSIGN type_object .)


state 105

    (43) type_object -> OPEN_BRACE . type_pairs CLOSE_BRACE
    (44) type_object -> OPEN_BRACE . CLOSE_BRACE
    (45) type_pairs -> . type_pair COMMA type_pairs
    (46) type_pairs -> . type_pair
    (47) type_pairs -> . type_pair COMMA
    (48) type_pair -> . key COLON type
    (49) key -> . QUOTED_STRING
    (50) key -> . STRING

    CLOSE_BRACE     shift and go to state 134
    QUOTED_STRING   shift and go to state 110
    STRING          shift and go to state 111

    type_pairs                     shift and go to state 133
    type_pair                      shift and go to state 135
    key                            shift and go to state 136

state 106

    (37) object -> OPEN_BRACE pairs . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 137


state 107

    (38) object -> OPEN_BRACE CLOSE_BRACE .

    SEMICOLON       reduce using rule 38 (object -> OPEN_BRACE CLOSE_BRACE .)
    COMMA           reduce using rule 38 (object -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 38 (object -> OPEN_BRACE CLOSE_BRACE .)


state 108

    (39) pairs -> pair .
    (40) pairs -> pair . COMMA
    (41) pairs -> pair . COMMA pairs

    CLOSE_BRACE     reduce using rule 39 (pairs -> pair .)
    COMMA           shift and go to state 138


state 109

    (42) pair -> key . COLON value

    COLON           shift and go to state 139


state 110

    (49) key -> QUOTED_STRING .

    COLON           reduce using rule 49 (key -> QUOTED_STRING .)


state 111

    (50) key -> STRING .

    COLON           reduce using rule 50 (key -> STRING .)


state 112

    (72) expression -> OPEN_PAREN expression CLOSE_PAREN .

    CLOSE_PAREN     reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MULTIPLY        reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIVISION        reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GRATER          reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOWER           reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GRATER_EQUAL    reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOWER_EQUAL     reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQUAL           reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    AND             reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    OR              reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    SEMICOLON       reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 72 (expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 113

    (8) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE . statementList CLOSE_BRACE
    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE . statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 140
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 114

    (60) expression -> expression PLUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 60 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 60 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 60 (expression -> expression PLUS expression .)
    GRATER          reduce using rule 60 (expression -> expression PLUS expression .)
    LOWER           reduce using rule 60 (expression -> expression PLUS expression .)
    GRATER_EQUAL    reduce using rule 60 (expression -> expression PLUS expression .)
    LOWER_EQUAL     reduce using rule 60 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 60 (expression -> expression PLUS expression .)
    AND             reduce using rule 60 (expression -> expression PLUS expression .)
    OR              reduce using rule 60 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 60 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression PLUS expression .)
    CLOSE_BRACE     reduce using rule 60 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83

  ! MULTIPLY        [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 115

    (61) expression -> expression MINUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 61 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 61 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 61 (expression -> expression MINUS expression .)
    GRATER          reduce using rule 61 (expression -> expression MINUS expression .)
    LOWER           reduce using rule 61 (expression -> expression MINUS expression .)
    GRATER_EQUAL    reduce using rule 61 (expression -> expression MINUS expression .)
    LOWER_EQUAL     reduce using rule 61 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 61 (expression -> expression MINUS expression .)
    AND             reduce using rule 61 (expression -> expression MINUS expression .)
    OR              reduce using rule 61 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 61 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression MINUS expression .)
    CLOSE_BRACE     reduce using rule 61 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83

  ! MULTIPLY        [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 116

    (62) expression -> expression MULTIPLY expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 62 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 62 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 62 (expression -> expression MULTIPLY expression .)
    DIVISION        reduce using rule 62 (expression -> expression MULTIPLY expression .)
    GRATER          reduce using rule 62 (expression -> expression MULTIPLY expression .)
    LOWER           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    GRATER_EQUAL    reduce using rule 62 (expression -> expression MULTIPLY expression .)
    LOWER_EQUAL     reduce using rule 62 (expression -> expression MULTIPLY expression .)
    EQUAL           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 62 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 62 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression MULTIPLY expression .)
    CLOSE_BRACE     reduce using rule 62 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! MULTIPLY        [ shift and go to state 82 ]
  ! DIVISION        [ shift and go to state 83 ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 117

    (63) expression -> expression DIVISION expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 63 (expression -> expression DIVISION expression .)
    PLUS            reduce using rule 63 (expression -> expression DIVISION expression .)
    MINUS           reduce using rule 63 (expression -> expression DIVISION expression .)
    MULTIPLY        reduce using rule 63 (expression -> expression DIVISION expression .)
    DIVISION        reduce using rule 63 (expression -> expression DIVISION expression .)
    GRATER          reduce using rule 63 (expression -> expression DIVISION expression .)
    LOWER           reduce using rule 63 (expression -> expression DIVISION expression .)
    GRATER_EQUAL    reduce using rule 63 (expression -> expression DIVISION expression .)
    LOWER_EQUAL     reduce using rule 63 (expression -> expression DIVISION expression .)
    EQUAL           reduce using rule 63 (expression -> expression DIVISION expression .)
    AND             reduce using rule 63 (expression -> expression DIVISION expression .)
    OR              reduce using rule 63 (expression -> expression DIVISION expression .)
    COMMA           reduce using rule 63 (expression -> expression DIVISION expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression DIVISION expression .)
    CLOSE_BRACE     reduce using rule 63 (expression -> expression DIVISION expression .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! MULTIPLY        [ shift and go to state 82 ]
  ! DIVISION        [ shift and go to state 83 ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 118

    (64) expression -> expression GRATER expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 64 (expression -> expression GRATER expression .)
    GRATER          reduce using rule 64 (expression -> expression GRATER expression .)
    LOWER           reduce using rule 64 (expression -> expression GRATER expression .)
    GRATER_EQUAL    reduce using rule 64 (expression -> expression GRATER expression .)
    LOWER_EQUAL     reduce using rule 64 (expression -> expression GRATER expression .)
    EQUAL           reduce using rule 64 (expression -> expression GRATER expression .)
    AND             reduce using rule 64 (expression -> expression GRATER expression .)
    OR              reduce using rule 64 (expression -> expression GRATER expression .)
    COMMA           reduce using rule 64 (expression -> expression GRATER expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression GRATER expression .)
    CLOSE_BRACE     reduce using rule 64 (expression -> expression GRATER expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83

  ! PLUS            [ reduce using rule 64 (expression -> expression GRATER expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression GRATER expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression -> expression GRATER expression .) ]
  ! DIVISION        [ reduce using rule 64 (expression -> expression GRATER expression .) ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 119

    (65) expression -> expression LOWER expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 65 (expression -> expression LOWER expression .)
    GRATER          reduce using rule 65 (expression -> expression LOWER expression .)
    LOWER           reduce using rule 65 (expression -> expression LOWER expression .)
    GRATER_EQUAL    reduce using rule 65 (expression -> expression LOWER expression .)
    LOWER_EQUAL     reduce using rule 65 (expression -> expression LOWER expression .)
    EQUAL           reduce using rule 65 (expression -> expression LOWER expression .)
    AND             reduce using rule 65 (expression -> expression LOWER expression .)
    OR              reduce using rule 65 (expression -> expression LOWER expression .)
    COMMA           reduce using rule 65 (expression -> expression LOWER expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression LOWER expression .)
    CLOSE_BRACE     reduce using rule 65 (expression -> expression LOWER expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83

  ! PLUS            [ reduce using rule 65 (expression -> expression LOWER expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression LOWER expression .) ]
  ! MULTIPLY        [ reduce using rule 65 (expression -> expression LOWER expression .) ]
  ! DIVISION        [ reduce using rule 65 (expression -> expression LOWER expression .) ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 120

    (66) expression -> expression GRATER_EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    GRATER          reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    LOWER           reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    GRATER_EQUAL    reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    LOWER_EQUAL     reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    EQUAL           reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    AND             reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    OR              reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    COMMA           reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    CLOSE_BRACE     reduce using rule 66 (expression -> expression GRATER_EQUAL expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83

  ! PLUS            [ reduce using rule 66 (expression -> expression GRATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression GRATER_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 66 (expression -> expression GRATER_EQUAL expression .) ]
  ! DIVISION        [ reduce using rule 66 (expression -> expression GRATER_EQUAL expression .) ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 121

    (67) expression -> expression LOWER_EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    GRATER          reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    LOWER           reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    GRATER_EQUAL    reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    LOWER_EQUAL     reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    EQUAL           reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    AND             reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    OR              reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    COMMA           reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    CLOSE_BRACE     reduce using rule 67 (expression -> expression LOWER_EQUAL expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83

  ! PLUS            [ reduce using rule 67 (expression -> expression LOWER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression LOWER_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 67 (expression -> expression LOWER_EQUAL expression .) ]
  ! DIVISION        [ reduce using rule 67 (expression -> expression LOWER_EQUAL expression .) ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 122

    (68) expression -> expression EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 68 (expression -> expression EQUAL expression .)
    GRATER          reduce using rule 68 (expression -> expression EQUAL expression .)
    LOWER           reduce using rule 68 (expression -> expression EQUAL expression .)
    GRATER_EQUAL    reduce using rule 68 (expression -> expression EQUAL expression .)
    LOWER_EQUAL     reduce using rule 68 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 68 (expression -> expression EQUAL expression .)
    AND             reduce using rule 68 (expression -> expression EQUAL expression .)
    OR              reduce using rule 68 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 68 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression EQUAL expression .)
    CLOSE_BRACE     reduce using rule 68 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83

  ! PLUS            [ reduce using rule 68 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 68 (expression -> expression EQUAL expression .) ]
  ! DIVISION        [ reduce using rule 68 (expression -> expression EQUAL expression .) ]
  ! GRATER          [ shift and go to state 84 ]
  ! LOWER           [ shift and go to state 85 ]
  ! GRATER_EQUAL    [ shift and go to state 86 ]
  ! LOWER_EQUAL     [ shift and go to state 87 ]
  ! EQUAL           [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 123

    (69) expression -> expression AND expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 69 (expression -> expression AND expression .)
    AND             reduce using rule 69 (expression -> expression AND expression .)
    OR              reduce using rule 69 (expression -> expression AND expression .)
    COMMA           reduce using rule 69 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression AND expression .)
    CLOSE_BRACE     reduce using rule 69 (expression -> expression AND expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88

  ! PLUS            [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! DIVISION        [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! GRATER          [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! LOWER           [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! GRATER_EQUAL    [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 89 ]
  ! OR              [ shift and go to state 90 ]


state 124

    (70) expression -> expression OR expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVISION expression
    (64) expression -> expression . GRATER expression
    (65) expression -> expression . LOWER expression
    (66) expression -> expression . GRATER_EQUAL expression
    (67) expression -> expression . LOWER_EQUAL expression
    (68) expression -> expression . EQUAL expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression

    CLOSE_PAREN     reduce using rule 70 (expression -> expression OR expression .)
    OR              reduce using rule 70 (expression -> expression OR expression .)
    COMMA           reduce using rule 70 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression OR expression .)
    CLOSE_BRACE     reduce using rule 70 (expression -> expression OR expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MULTIPLY        shift and go to state 82
    DIVISION        shift and go to state 83
    GRATER          shift and go to state 84
    LOWER           shift and go to state 85
    GRATER_EQUAL    shift and go to state 86
    LOWER_EQUAL     shift and go to state 87
    EQUAL           shift and go to state 88
    AND             shift and go to state 89

  ! PLUS            [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! DIVISION        [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! GRATER          [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! LOWER           [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! GRATER_EQUAL    [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 90 ]


state 125

    (10) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE . statementList CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 141
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 126

    (16) args_list -> STRING COLON . type
    (17) args_list -> STRING COLON . type COMMA args_list
    (51) type -> . CHARACTER
    (52) type -> . INT_TYPE
    (53) type -> . FLOAT_TYPE
    (54) type -> . BOOLEAN
    (55) type -> . type_object
    (56) type -> . STRING
    (43) type_object -> . OPEN_BRACE type_pairs CLOSE_BRACE
    (44) type_object -> . OPEN_BRACE CLOSE_BRACE

    CHARACTER       shift and go to state 144
    INT_TYPE        shift and go to state 145
    FLOAT_TYPE      shift and go to state 146
    BOOLEAN         shift and go to state 147
    STRING          shift and go to state 142
    OPEN_BRACE      shift and go to state 105

    type                           shift and go to state 143
    type_object                    shift and go to state 148

state 127

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN . COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    COLON           shift and go to state 149


state 128

    (14) args_call -> expression COMMA args_call .

    CLOSE_PAREN     reduce using rule 14 (args_call -> expression COMMA args_call .)


state 129

    (35) object_identifiers -> STRING . COLON STRING
    (36) object_identifiers -> STRING . COLON STRING COMMA object_identifiers

    COLON           shift and go to state 31


state 130

    (36) object_identifiers -> STRING COLON STRING COMMA object_identifiers .

    ASSIGN          reduce using rule 36 (object_identifiers -> STRING COLON STRING COMMA object_identifiers .)


state 131

    (29) declaration_identifier -> STRING COLON . STRING
    (30) declaration_identifier -> STRING COLON . STRING COMMA declaration_identifier

    STRING          shift and go to state 150


state 132

    (30) declaration_identifier -> STRING COLON STRING COMMA . declaration_identifier
    (36) object_identifiers -> STRING COLON STRING COMMA . object_identifiers
    (27) declaration_identifier -> . STRING
    (28) declaration_identifier -> . STRING COMMA declaration_identifier
    (29) declaration_identifier -> . STRING COLON STRING
    (30) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    STRING          shift and go to state 151

    declaration_identifier         shift and go to state 152
    object_identifiers             shift and go to state 130

state 133

    (43) type_object -> OPEN_BRACE type_pairs . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 153


state 134

    (44) type_object -> OPEN_BRACE CLOSE_BRACE .

    SEMICOLON       reduce using rule 44 (type_object -> OPEN_BRACE CLOSE_BRACE .)
    COMMA           reduce using rule 44 (type_object -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 44 (type_object -> OPEN_BRACE CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 44 (type_object -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 44 (type_object -> OPEN_BRACE CLOSE_BRACE .)


state 135

    (45) type_pairs -> type_pair . COMMA type_pairs
    (46) type_pairs -> type_pair .
    (47) type_pairs -> type_pair . COMMA

    COMMA           shift and go to state 154
    CLOSE_BRACE     reduce using rule 46 (type_pairs -> type_pair .)


state 136

    (48) type_pair -> key . COLON type

    COLON           shift and go to state 155


state 137

    (37) object -> OPEN_BRACE pairs CLOSE_BRACE .

    SEMICOLON       reduce using rule 37 (object -> OPEN_BRACE pairs CLOSE_BRACE .)
    COMMA           reduce using rule 37 (object -> OPEN_BRACE pairs CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 37 (object -> OPEN_BRACE pairs CLOSE_BRACE .)


state 138

    (40) pairs -> pair COMMA .
    (41) pairs -> pair COMMA . pairs
    (39) pairs -> . pair
    (40) pairs -> . pair COMMA
    (41) pairs -> . pair COMMA pairs
    (42) pair -> . key COLON value
    (49) key -> . QUOTED_STRING
    (50) key -> . STRING

    CLOSE_BRACE     reduce using rule 40 (pairs -> pair COMMA .)
    QUOTED_STRING   shift and go to state 110
    STRING          shift and go to state 111

    pair                           shift and go to state 108
    pairs                          shift and go to state 156
    key                            shift and go to state 109

state 139

    (42) pair -> key COLON . value
    (57) value -> . NULL
    (58) value -> . expression
    (59) value -> . object
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (37) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (38) object -> . OPEN_BRACE CLOSE_BRACE
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NULL            shift and go to state 73
    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54
    OPEN_BRACE      shift and go to state 76

    value                          shift and go to state 157
    expression                     shift and go to state 74
    object                         shift and go to state 75
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 140

    (8) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList . CLOSE_BRACE
    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList . CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    CLOSE_BRACE     shift and go to state 158
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 141

    (10) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList . CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    CLOSE_BRACE     shift and go to state 159
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 142

    (56) type -> STRING .

    COMMA           reduce using rule 56 (type -> STRING .)
    CLOSE_PAREN     reduce using rule 56 (type -> STRING .)
    OPEN_BRACE      reduce using rule 56 (type -> STRING .)
    CLOSE_BRACE     reduce using rule 56 (type -> STRING .)


state 143

    (16) args_list -> STRING COLON type .
    (17) args_list -> STRING COLON type . COMMA args_list

    CLOSE_PAREN     reduce using rule 16 (args_list -> STRING COLON type .)
    COMMA           shift and go to state 160


state 144

    (51) type -> CHARACTER .

    COMMA           reduce using rule 51 (type -> CHARACTER .)
    CLOSE_PAREN     reduce using rule 51 (type -> CHARACTER .)
    OPEN_BRACE      reduce using rule 51 (type -> CHARACTER .)
    CLOSE_BRACE     reduce using rule 51 (type -> CHARACTER .)


state 145

    (52) type -> INT_TYPE .

    COMMA           reduce using rule 52 (type -> INT_TYPE .)
    CLOSE_PAREN     reduce using rule 52 (type -> INT_TYPE .)
    OPEN_BRACE      reduce using rule 52 (type -> INT_TYPE .)
    CLOSE_BRACE     reduce using rule 52 (type -> INT_TYPE .)


state 146

    (53) type -> FLOAT_TYPE .

    COMMA           reduce using rule 53 (type -> FLOAT_TYPE .)
    CLOSE_PAREN     reduce using rule 53 (type -> FLOAT_TYPE .)
    OPEN_BRACE      reduce using rule 53 (type -> FLOAT_TYPE .)
    CLOSE_BRACE     reduce using rule 53 (type -> FLOAT_TYPE .)


state 147

    (54) type -> BOOLEAN .

    COMMA           reduce using rule 54 (type -> BOOLEAN .)
    CLOSE_PAREN     reduce using rule 54 (type -> BOOLEAN .)
    OPEN_BRACE      reduce using rule 54 (type -> BOOLEAN .)
    CLOSE_BRACE     reduce using rule 54 (type -> BOOLEAN .)


state 148

    (55) type -> type_object .

    COMMA           reduce using rule 55 (type -> type_object .)
    CLOSE_PAREN     reduce using rule 55 (type -> type_object .)
    OPEN_BRACE      reduce using rule 55 (type -> type_object .)
    CLOSE_BRACE     reduce using rule 55 (type -> type_object .)


state 149

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON . type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (51) type -> . CHARACTER
    (52) type -> . INT_TYPE
    (53) type -> . FLOAT_TYPE
    (54) type -> . BOOLEAN
    (55) type -> . type_object
    (56) type -> . STRING
    (43) type_object -> . OPEN_BRACE type_pairs CLOSE_BRACE
    (44) type_object -> . OPEN_BRACE CLOSE_BRACE

    CHARACTER       shift and go to state 144
    INT_TYPE        shift and go to state 145
    FLOAT_TYPE      shift and go to state 146
    BOOLEAN         shift and go to state 147
    STRING          shift and go to state 142
    OPEN_BRACE      shift and go to state 105

    type                           shift and go to state 161
    type_object                    shift and go to state 148

state 150

    (29) declaration_identifier -> STRING COLON STRING .
    (30) declaration_identifier -> STRING COLON STRING . COMMA declaration_identifier

    SEMICOLON       reduce using rule 29 (declaration_identifier -> STRING COLON STRING .)
    COMMA           shift and go to state 162


state 151

    (27) declaration_identifier -> STRING .
    (28) declaration_identifier -> STRING . COMMA declaration_identifier
    (29) declaration_identifier -> STRING . COLON STRING
    (30) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier
    (35) object_identifiers -> STRING . COLON STRING
    (36) object_identifiers -> STRING . COLON STRING COMMA object_identifiers

    SEMICOLON       reduce using rule 27 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 163
    COLON           shift and go to state 70


state 152

    (30) declaration_identifier -> STRING COLON STRING COMMA declaration_identifier .

    SEMICOLON       reduce using rule 30 (declaration_identifier -> STRING COLON STRING COMMA declaration_identifier .)


state 153

    (43) type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .

    SEMICOLON       reduce using rule 43 (type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .)
    COMMA           reduce using rule 43 (type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 43 (type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 43 (type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 43 (type_object -> OPEN_BRACE type_pairs CLOSE_BRACE .)


state 154

    (45) type_pairs -> type_pair COMMA . type_pairs
    (47) type_pairs -> type_pair COMMA .
    (45) type_pairs -> . type_pair COMMA type_pairs
    (46) type_pairs -> . type_pair
    (47) type_pairs -> . type_pair COMMA
    (48) type_pair -> . key COLON type
    (49) key -> . QUOTED_STRING
    (50) key -> . STRING

    CLOSE_BRACE     reduce using rule 47 (type_pairs -> type_pair COMMA .)
    QUOTED_STRING   shift and go to state 110
    STRING          shift and go to state 111

    type_pair                      shift and go to state 135
    type_pairs                     shift and go to state 164
    key                            shift and go to state 136

state 155

    (48) type_pair -> key COLON . type
    (51) type -> . CHARACTER
    (52) type -> . INT_TYPE
    (53) type -> . FLOAT_TYPE
    (54) type -> . BOOLEAN
    (55) type -> . type_object
    (56) type -> . STRING
    (43) type_object -> . OPEN_BRACE type_pairs CLOSE_BRACE
    (44) type_object -> . OPEN_BRACE CLOSE_BRACE

    CHARACTER       shift and go to state 144
    INT_TYPE        shift and go to state 145
    FLOAT_TYPE      shift and go to state 146
    BOOLEAN         shift and go to state 147
    STRING          shift and go to state 142
    OPEN_BRACE      shift and go to state 105

    type                           shift and go to state 165
    type_object                    shift and go to state 148

state 156

    (41) pairs -> pair COMMA pairs .

    CLOSE_BRACE     reduce using rule 41 (pairs -> pair COMMA pairs .)


state 157

    (42) pair -> key COLON value .

    COMMA           reduce using rule 42 (pair -> key COLON value .)
    CLOSE_BRACE     reduce using rule 42 (pair -> key COLON value .)


state 158

    (8) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .
    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE . ELSE OPEN_BRACE statementList CLOSE_BRACE

    IF              reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    WHILE           reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    FUNCTION        reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    LET             reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    TYPE            reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    STRING          reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    $end            reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    RETURN          reduce using rule 8 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    ELSE            shift and go to state 166


state 159

    (10) loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .

    IF              reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    WHILE           reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    FUNCTION        reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    LET             reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    TYPE            reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    STRING          reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    $end            reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)
    RETURN          reduce using rule 10 (loop -> WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE .)


state 160

    (17) args_list -> STRING COLON type COMMA . args_list
    (16) args_list -> . STRING COLON type
    (17) args_list -> . STRING COLON type COMMA args_list
    (18) args_list -> .

    STRING          shift and go to state 94
    CLOSE_PAREN     reduce using rule 18 (args_list -> .)

    args_list                      shift and go to state 167

state 161

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type . OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE

    OPEN_BRACE      shift and go to state 168


state 162

    (30) declaration_identifier -> STRING COLON STRING COMMA . declaration_identifier
    (27) declaration_identifier -> . STRING
    (28) declaration_identifier -> . STRING COMMA declaration_identifier
    (29) declaration_identifier -> . STRING COLON STRING
    (30) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier

    STRING          shift and go to state 169

    declaration_identifier         shift and go to state 152

state 163

    (28) declaration_identifier -> STRING COMMA . declaration_identifier
    (27) declaration_identifier -> . STRING
    (28) declaration_identifier -> . STRING COMMA declaration_identifier
    (29) declaration_identifier -> . STRING COLON STRING
    (30) declaration_identifier -> . STRING COLON STRING COMMA declaration_identifier

    STRING          shift and go to state 169

    declaration_identifier         shift and go to state 102

state 164

    (45) type_pairs -> type_pair COMMA type_pairs .

    CLOSE_BRACE     reduce using rule 45 (type_pairs -> type_pair COMMA type_pairs .)


state 165

    (48) type_pair -> key COLON type .

    COMMA           reduce using rule 48 (type_pair -> key COLON type .)
    CLOSE_BRACE     reduce using rule 48 (type_pair -> key COLON type .)


state 166

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE . OPEN_BRACE statementList CLOSE_BRACE

    OPEN_BRACE      shift and go to state 170


state 167

    (17) args_list -> STRING COLON type COMMA args_list .

    CLOSE_PAREN     reduce using rule 17 (args_list -> STRING COLON type COMMA args_list .)


state 168

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE . statementList RETURN value SEMICOLON CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 171
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 169

    (27) declaration_identifier -> STRING .
    (28) declaration_identifier -> STRING . COMMA declaration_identifier
    (29) declaration_identifier -> STRING . COLON STRING
    (30) declaration_identifier -> STRING . COLON STRING COMMA declaration_identifier

    SEMICOLON       reduce using rule 27 (declaration_identifier -> STRING .)
    COMMA           shift and go to state 163
    COLON           shift and go to state 131


state 170

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE . statementList CLOSE_BRACE
    (2) statementList -> . statement
    (3) statementList -> . statementList statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statementList                  shift and go to state 172
    statement                      shift and go to state 3
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 171

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList . RETURN value SEMICOLON CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    RETURN          shift and go to state 173
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 172

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList . CLOSE_BRACE
    (3) statementList -> statementList . statement
    (4) statement -> . instruction
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function_definition
    (19) instruction -> . declaration SEMICOLON
    (20) instruction -> . asignation SEMICOLON
    (21) instruction -> . property_asignation SEMICOLON
    (22) instruction -> . function_call SEMICOLON
    (8) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (9) conditional -> . IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE
    (10) loop -> . WHILE OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE
    (11) function_definition -> . FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE
    (24) declaration -> . LET declaration_identifier
    (25) declaration -> . LET asignation
    (26) declaration -> . TYPE STRING ASSIGN type_object
    (33) asignation -> . identifiers ASSIGN value
    (34) asignation -> . object_identifiers ASSIGN object
    (23) property_asignation -> . STRING properties ASSIGN value
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN
    (31) identifiers -> . STRING
    (32) identifiers -> . STRING COMMA identifiers
    (35) object_identifiers -> . STRING COLON STRING
    (36) object_identifiers -> . STRING COLON STRING COMMA object_identifiers

    CLOSE_BRACE     shift and go to state 174
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FUNCTION        shift and go to state 14
    LET             shift and go to state 16
    TYPE            shift and go to state 17
    STRING          shift and go to state 15

    statement                      shift and go to state 20
    instruction                    shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function_definition            shift and go to state 7
    declaration                    shift and go to state 8
    asignation                     shift and go to state 9
    property_asignation            shift and go to state 10
    function_call                  shift and go to state 11
    identifiers                    shift and go to state 18
    object_identifiers             shift and go to state 19

state 173

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN . value SEMICOLON CLOSE_BRACE
    (57) value -> . NULL
    (58) value -> . expression
    (59) value -> . object
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVISION expression
    (64) expression -> . expression GRATER expression
    (65) expression -> . expression LOWER expression
    (66) expression -> . expression GRATER_EQUAL expression
    (67) expression -> . expression LOWER_EQUAL expression
    (68) expression -> . expression EQUAL expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . NOT expression
    (72) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (73) expression -> . INTEGER
    (74) expression -> . FLOAT
    (75) expression -> . HEX
    (76) expression -> . SCIENTIFIC
    (77) expression -> . OCTAL
    (78) expression -> . BINARY
    (79) expression -> . CHARACTER_VALUE
    (80) expression -> . TRUE
    (81) expression -> . FALSE
    (82) expression -> . STRING
    (83) expression -> . object_property
    (84) expression -> . function_call
    (37) object -> . OPEN_BRACE pairs CLOSE_BRACE
    (38) object -> . OPEN_BRACE CLOSE_BRACE
    (85) object_property -> . STRING properties
    (12) function_call -> . STRING OPEN_PAREN args_call CLOSE_PAREN

    NULL            shift and go to state 73
    NOT             shift and go to state 44
    OPEN_PAREN      shift and go to state 42
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    HEX             shift and go to state 47
    SCIENTIFIC      shift and go to state 48
    OCTAL           shift and go to state 49
    BINARY          shift and go to state 50
    CHARACTER_VALUE shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    STRING          shift and go to state 54
    OPEN_BRACE      shift and go to state 76

    value                          shift and go to state 175
    expression                     shift and go to state 74
    object                         shift and go to state 75
    object_property                shift and go to state 55
    function_call                  shift and go to state 56

state 174

    (9) conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .

    IF              reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    WHILE           reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    FUNCTION        reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    LET             reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    TYPE            reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    STRING          reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    $end            reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)
    RETURN          reduce using rule 9 (conditional -> IF OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE statementList CLOSE_BRACE ELSE OPEN_BRACE statementList CLOSE_BRACE .)


state 175

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value . SEMICOLON CLOSE_BRACE

    SEMICOLON       shift and go to state 176


state 176

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 177


state 177

    (11) function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .

    IF              reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    WHILE           reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    FUNCTION        reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    LET             reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    TYPE            reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    STRING          reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    $end            reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)
    RETURN          reduce using rule 11 (function_definition -> FUNCTION STRING OPEN_PAREN args_list CLOSE_PAREN COLON type OPEN_BRACE statementList RETURN value SEMICOLON CLOSE_BRACE .)

