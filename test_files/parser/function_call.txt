type NestedObject = { "this is": character, prop2: int, "prop3": boolean };
type Object = { prop1: float, "nested": NestedObject };

let var1: Object, var2, var3;
var1 = {
    prop1: 10e-1,
    nested: { "this is": 'A', prop2: 1, prop3: tr }
};
var2 = 0;
function gte(a: int, b: int): int {
    a = a + b;
    return a;
}

let h = gte(var1.nested["prop2"], var2);

if (gte(var1.nested["prop2"], var2)) {
    var3 = 'Y';
} else {
    var3 = 'N';
}

type AnotherCircleType = { cx: float, cy: float, radio: float, color: character };

let newCircle: AnotherCircleType = {
  cx: 10.1,
  cy: 10.5,
  radio: 100.5,
  color: 'r',
};




let a;
let b = 1;
a = 2;

function div(a: AnotherCircleType, b: int): AnotherCircleType {
    let temp = 0;
    while (a.cx > 0) {
        a.cx = a.cx - b;
        temp = temp + 1;
    }
    return { cx: 10.1, cy: 10.5, radio: 100.5, color: 'r'};
}

h = div(newCircle, b);
